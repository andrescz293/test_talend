// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test.req_01_dimension_datos_basicos_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.conversion;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;
import java.io.File;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: REQ_01_dimension_datos_basicos Purpose:
 * REQ_01_dimension_datos_basicos<br>
 * Description: REQ_01_dimension_datos_basicos <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class REQ_01_dimension_datos_basicos implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "REQ_01_dimension_datos_basicos";
	private final String projectName = "TEST";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					REQ_01_dimension_datos_basicos.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(REQ_01_dimension_datos_basicos.this,
									new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractXMLField_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractXMLField_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 main ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				globalMap.put("job_name", "req_01_dimension_datos_basicos");
				globalMap.put("root_job_windows", "C:\\jobs\\grupollano\\REQ_01_dimension_datos_basicos\\pruebas");

				tos_count_tSetGlobalVar_1++;

				/**
				 * [tSetGlobalVar_1 main ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_begin ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				String OS = System.getProperty("os.name").toLowerCase();

				System.out.println(OS);

				File f = new File(System.getProperty("java.class.path"));
				File dir = f.getAbsoluteFile().getParentFile();
				String path = dir.toString();

				if (OS.indexOf("win") == -1) {
					String[] path_partes = path.split(":");

					path = path_partes[0];

					path = path.replace("/.", "");

					System.out.println("path_run:" + path + "<<end:paht");

					int int_root_new = path.indexOf("/pruebas");

					if (int_root_new != -1) {
						String url_root_aux = path.substring(0, int_root_new + 8);
						System.out.println(url_root_aux);
						globalMap.put("root_job", url_root_aux + "/");

					} else {

						int_root_new = path.indexOf("/produccion");

						if (int_root_new != -1) {
							String url_root_aux = path.substring(0, int_root_new + 11);
							System.out.println(url_root_aux);

							globalMap.put("root_job", url_root_aux + "/");

						} else {
							System.out.println("Archivo de configuracion no encontrado");
							System.exit(0);

						}

					}

				}

				globalMap.put("config_path", (String) globalMap.get("root_job") + "/configuracion/config.xml");

				if (OS.indexOf("win") >= 0) {

					globalMap.put("root_job", (String) globalMap.get("root_job_windows"));
					globalMap.put("config_path", (String) globalMap.get("root_job") + "\\configuracion\\config.xml");

				}

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];

		public String variables;

		public String getVariables() {
			return this.variables;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.variables = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variables, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variables=" + variables);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String subcompanys;

		public String getSubcompanys() {
			return this.subcompanys;
		}

		public String folder_root;

		public String getFolder_root() {
			return this.folder_root;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.subcompanys = readString(dis);

					this.folder_root = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.subcompanys, dos);

				// String

				writeString(this.folder_root, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",subcompanys=" + subcompanys);
			sb.append(",folder_root=" + folder_root);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String subcompanys;

		public String getSubcompanys() {
			return this.subcompanys;
		}

		public String folder_root;

		public String getFolder_root() {
			return this.folder_root;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.subcompanys = readString(dis);

					this.folder_root = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.subcompanys, dos);

				// String

				writeString(this.folder_root, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",subcompanys=" + subcompanys);
			sb.append(",folder_root=" + folder_root);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String subcompanys;

		public String getSubcompanys() {
			return this.subcompanys;
		}

		public String folder_root;

		public String getFolder_root() {
			return this.folder_root;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.subcompanys = readString(dis);

					this.folder_root = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.subcompanys, dos);

				// String

				writeString(this.folder_root, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",subcompanys=" + subcompanys);
			sb.append(",folder_root=" + folder_root);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String subcompanys;

		public String getSubcompanys() {
			return this.subcompanys;
		}

		public String folder_root;

		public String getFolder_root() {
			return this.folder_root;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.subcompanys = readString(dis);

					this.folder_root = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.subcompanys, dos);

				// String

				writeString(this.folder_root, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",subcompanys=" + subcompanys);
			sb.append(",folder_root=" + folder_root);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String subcompanys;

		public String getSubcompanys() {
			return this.subcompanys;
		}

		public String folder_root;

		public String getFolder_root() {
			return this.folder_root;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.subcompanys = readString(dis);

					this.folder_root = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.subcompanys, dos);

				// String

				writeString(this.folder_root, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",subcompanys=" + subcompanys);
			sb.append(",folder_root=" + folder_root);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();
				row25Struct row25 = new row25Struct();
				row28Struct row28 = new row28Struct();
				row29Struct row29 = new row29Struct();
				row30Struct row30 = new row30Struct();
				row31Struct row31 = new row31Struct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tJava_2 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row31");
				}

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tExtractXMLField_1 begin ] start
				 */

				ok_Hash.put("tExtractXMLField_1", false);
				start_Hash.put("tExtractXMLField_1", System.currentTimeMillis());

				currentComponent = "tExtractXMLField_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row30");
				}

				int tos_count_tExtractXMLField_1 = 0;

				int nb_line_tExtractXMLField_1 = 0;

				class NameSpaceTool_tExtractXMLField_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put("pre" + defualtNSPath.size(), ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
										path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
							countNSMap(e);
						}
					}

					/**
					 * the regex for the xpath like that : case 1 :
					 * functionA(locationXPathExpression) case 2 :
					 * fn:functionA(locationXPathExpression) case 3 :
					 * functionA(functionB(locationXPathExpression)) case 4 :
					 * fn:functionA(fn:functionB(locationXPathExpression)) and like that.
					 */
					private java.util.regex.Pattern simpleFunctionPattern;
					private StringBuffer stringBuffer;
					private java.util.Map<String, String> resultCache;

					public String addDefaultNSPrefix(final String xpathExpression, String loopPath) {
						if (defualtNSPath.size() < 1) {
							return xpathExpression;
						}

						if (resultCache == null) {
							resultCache = new java.util.HashMap<String, String>();
						}

						String resultXpathExpression = resultCache.get(xpathExpression);
						if (resultXpathExpression != null) {
							return resultXpathExpression;
						}

						String locationPathExpression = xpathExpression;

						if (simpleFunctionPattern == null) {
							simpleFunctionPattern = java.util.regex.Pattern
									.compile("([a-zA-z0-9]+:)?[a-zA-Z]+-?[A-Za-z]+\\(.*\\)");
						}

						boolean isSimpleFunctionXPath = simpleFunctionPattern.matcher(xpathExpression).matches();
						String tail = null;
						if (isSimpleFunctionXPath) {
							int start = xpathExpression.lastIndexOf('(');
							int end = xpathExpression.indexOf(')');
							if (start < end) {
								if (stringBuffer == null) {
									stringBuffer = new StringBuffer();
								}
								locationPathExpression = xpathExpression.substring(start + 1, end);
								stringBuffer.append(xpathExpression.substring(0, start + 1));
								tail = xpathExpression.substring(end);
							} else {
								isSimpleFunctionXPath = false;
							}
						}

						locationPathExpression = addDefaultNSPrefixForLocationXPathExpression(locationPathExpression,
								loopPath);

						resultXpathExpression = locationPathExpression;

						if (isSimpleFunctionXPath) {
							stringBuffer.append(locationPathExpression);
							stringBuffer.append(tail);
							resultXpathExpression = stringBuffer.toString();
							stringBuffer.setLength(0);
						}

						resultCache.put(xpathExpression, resultXpathExpression);
						return resultXpathExpression;
					}

					private String addDefaultNSPrefixForLocationXPathExpression(String path, String loopPath) {
						String fullPath = loopPath;
						if (!path.equals(fullPath)) {
							for (String tmp : path.split("/")) {
								if (("..").equals(tmp)) {
									fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
								} else {
									fullPath += "/" + tmp;
								}
							}
						}
						int[] indexs = new int[fullPath.split("/").length - 1];
						java.util.Arrays.fill(indexs, -1);
						int length = 0;
						for (int i = 0; i < defualtNSPath.size(); i++) {
							if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
								java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length,
										i);
								length = defualtNSPath.get(i).length();
							}
						}

						StringBuilder newPath = new StringBuilder();
						String[] pathStrs = path.split("/");
						for (int i = 0; i < pathStrs.length; i++) {
							String tmp = pathStrs[i];
							if (newPath.length() > 0) {
								newPath.append("/");
							}
							if (tmp.length() > 0 && tmp.indexOf(":") == -1
									&& tmp.indexOf(".") == -1 /* && tmp.indexOf("@") == -1 */) {
								int index = indexs[i + indexs.length - pathStrs.length];
								if (index >= 0) {
									// ==== add by wliu to support both filter and functions==
									if (tmp.indexOf("[") > 0 && tmp.indexOf("]") > tmp.indexOf("[")) {// include filter
										String tmpStr = replaceElementWithNS(tmp, "pre" + index + ":");
										newPath.append(tmpStr);
									} else {
										if (tmp.indexOf("@") != -1 || tmp.indexOf("(") < tmp.indexOf(")")) { // include
																												// attribute
											newPath.append(tmp);
										} else {
											// ==add end=======
											newPath.append("pre").append(index).append(":").append(tmp);
										}
									}
								} else {
									newPath.append(tmp);
								}
							} else {
								newPath.append(tmp);
							}
						}
						return newPath.toString();
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(matches);

					private String replaceElementWithNS(String global, String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches("\\b(div|mod|and|or)\\b.*") || group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tExtractXMLField_1 {
					public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
							if (attri != null && ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				XML_API_tExtractXMLField_1 xml_api_tExtractXMLField_1 = new XML_API_tExtractXMLField_1();

				/**
				 * [tExtractXMLField_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row29");
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tReplicate_2 begin ] start
				 */

				ok_Hash.put("tReplicate_2", false);
				start_Hash.put("tReplicate_2", System.currentTimeMillis());

				currentComponent = "tReplicate_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row28");
				}

				int tos_count_tReplicate_2 = 0;

				/**
				 * [tReplicate_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row25");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tFileInputXML_1 begin ] start
				 */

				ok_Hash.put("tFileInputXML_1", false);
				start_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				currentComponent = "tFileInputXML_1";

				int tos_count_tFileInputXML_1 = 0;

				int nb_line_tFileInputXML_1 = 0;

				String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
				boolean isWindows_tFileInputXML_1 = false;
				if (os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1) {
					isWindows_tFileInputXML_1 = true;
				}
				class NameSpaceTool_tFileInputXML_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put("pre" + defualtNSPath.size(), ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
										path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
							countNSMap(e);
						}
					}

					private final org.talend.xpath.XPathUtil util = new org.talend.xpath.XPathUtil();

					{
						util.setDefaultNSPath(defualtNSPath);
					}

					public String addDefaultNSPrefix(String path) {
						return util.addDefaultNSPrefix(path);
					}

					public String addDefaultNSPrefix(String relativeXpression, String basePath) {
						return util.addDefaultNSPrefix(relativeXpression, basePath);
					}

				}

				class XML_API_tFileInputXML_1 {
					public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
							if (attri != null && ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
				Object filename_tFileInputXML_1 = null;
				try {
					filename_tFileInputXML_1 = (String) globalMap.get("config_path");
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String
						&& filename_tFileInputXML_1.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_1) {
						filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_1 = true;
				org.dom4j.Document doc_tFileInputXML_1 = null;
				java.io.Closeable toClose_tFileInputXML_1 = null;
				try {
					if (filename_tFileInputXML_1 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream) filename_tFileInputXML_1;
						toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
						doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(
								new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)), "ISO-8859-15");
						toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
						org.xml.sax.InputSource in_tFileInputXML_1 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_1);
						doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
					}
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_1 = false;
				} finally {
					if (toClose_tFileInputXML_1 != null) {
						toClose_tFileInputXML_1.close();
					}
				}
				if (isValidFile_tFileInputXML_1) {
					NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
					nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1
							.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/xml/jobs/job"));
					x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

					java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) x_tFileInputXML_1
							.selectNodes(doc_tFileInputXML_1);
					XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
					String str_tFileInputXML_1 = "";
					org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
					java.util.Map<Integer, org.dom4j.XPath> xpaths_tFileInputXML_1 = new java.util.HashMap<Integer, org.dom4j.XPath>();
					class XPathUtil_tFileInputXML_1 {

						public void initXPaths_0(java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_1 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("@name", "/xml/jobs/job"));
							xpath_0.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(0, xpath_0);

							org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("subcompanys", "/xml/jobs/job"));
							xpath_1.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(1, xpath_1);

							org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("@folder_root", "/xml/jobs/job"));
							xpath_2.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(2, xpath_2);

						}

						public void initXPaths(java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_1 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							initXPaths_0(xpaths, nsTool, xmlNameSpaceMap);

						}
					}
					XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
					xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1,
							xmlNameSpaceMap_tFileInputXML_1);
					for (org.dom4j.Node temp_tFileInputXML_1 : nodeList_tFileInputXML_1) {
						nb_line_tFileInputXML_1++;

						row23 = null;
						boolean whetherReject_tFileInputXML_1 = false;
						row23 = new row23Struct();
						try {
							Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
							if (obj0_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj0_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
										org.jaxen.dom4j.DocumentNavigator.getInstance());
							} else if (obj0_tFileInputXML_1 instanceof String
									|| obj0_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
							} else if (obj0_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1.size() > 0 ? nodes_tFileInputXML_1.get(0)
										: null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator.getInstance());
							}
							if (xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)) {
								row23.name = null;
							} else if (xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)) {
								row23.name = "";
							} else if (xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)) {
								row23.name = null;
							} else {
								row23.name = str_tFileInputXML_1;
							}
							Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
							if (obj1_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = null;

							} else if (obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj1_tFileInputXML_1;
								str_tFileInputXML_1 = node_tFileInputXML_1.asXML();
							} else if (obj1_tFileInputXML_1 instanceof String
									|| obj1_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
							} else if (obj1_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1.size() > 0 ? nodes_tFileInputXML_1.get(0)
										: null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? null
										: node_tFileInputXML_1.asXML();
							}
							row23.subcompanys = str_tFileInputXML_1;
							Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
							if (obj2_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj2_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
										org.jaxen.dom4j.DocumentNavigator.getInstance());
							} else if (obj2_tFileInputXML_1 instanceof String
									|| obj2_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
							} else if (obj2_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1.size() > 0 ? nodes_tFileInputXML_1.get(0)
										: null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator.getInstance());
							}
							if (xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)) {
								row23.folder_root = null;
							} else if (xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)) {
								row23.folder_root = "";
							} else if (xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)) {
								row23.folder_root = null;
							} else {
								row23.folder_root = str_tFileInputXML_1;
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_1 = true;
							System.err.println(e.getMessage());
							row23 = null;
						}

						/**
						 * [tFileInputXML_1 begin ] stop
						 */

						/**
						 * [tFileInputXML_1 main ] start
						 */

						currentComponent = "tFileInputXML_1";

						tos_count_tFileInputXML_1++;

						/**
						 * [tFileInputXML_1 main ] stop
						 */

						/**
						 * [tFileInputXML_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputXML_1";

						/**
						 * [tFileInputXML_1 process_data_begin ] stop
						 */
// Start of branch "row23"
						if (row23 != null) {

							/**
							 * [tReplicate_1 main ] start
							 */

							currentComponent = "tReplicate_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row23");
							}

							row25 = new row25Struct();

							row25.name = row23.name;
							row25.subcompanys = row23.subcompanys;
							row25.folder_root = row23.folder_root;

							tos_count_tReplicate_1++;

							/**
							 * [tReplicate_1 main ] stop
							 */

							/**
							 * [tReplicate_1 process_data_begin ] start
							 */

							currentComponent = "tReplicate_1";

							/**
							 * [tReplicate_1 process_data_begin ] stop
							 */

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row25");
							}

							row28 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
							ope_tFilterRow_1.matches(
									(row25.name == null ? false
											: row25.name.matches((String) globalMap.get("job_name")) == true),
									" name.matches((String)globalMap.get(\"job_name\")) == true failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row28 == null) {
									row28 = new row28Struct();
								}
								row28.name = row25.name;
								row28.subcompanys = row25.subcompanys;
								row28.folder_root = row25.folder_root;
								nb_line_ok_tFilterRow_1++;
							} else {
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */

							/**
							 * [tFilterRow_1 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_begin ] stop
							 */
// Start of branch "row28"
							if (row28 != null) {

								/**
								 * [tReplicate_2 main ] start
								 */

								currentComponent = "tReplicate_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row28");
								}

								row29 = new row29Struct();

								row29.name = row28.name;
								row29.subcompanys = row28.subcompanys;
								row29.folder_root = row28.folder_root;

								tos_count_tReplicate_2++;

								/**
								 * [tReplicate_2 main ] stop
								 */

								/**
								 * [tReplicate_2 process_data_begin ] start
								 */

								currentComponent = "tReplicate_2";

								/**
								 * [tReplicate_2 process_data_begin ] stop
								 */

								/**
								 * [tJavaRow_1 main ] start
								 */

								currentComponent = "tJavaRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row29");
								}

								// Code generate according to input schema and output schema
								row30.name = row29.name;
								row30.subcompanys = row29.subcompanys;
								row30.folder_root = row29.folder_root;

								globalMap.put("root_job", row30.folder_root);

								nb_line_tJavaRow_1++;

								tos_count_tJavaRow_1++;

								/**
								 * [tJavaRow_1 main ] stop
								 */

								/**
								 * [tJavaRow_1 process_data_begin ] start
								 */

								currentComponent = "tJavaRow_1";

								/**
								 * [tJavaRow_1 process_data_begin ] stop
								 */

								/**
								 * [tExtractXMLField_1 main ] start
								 */

								currentComponent = "tExtractXMLField_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row30");
								}

								String xmlStr_tExtractXMLField_1 = null;
								routines.system.Document xmlDocument_tExtractXMLField_1 = null;
								if (row30.subcompanys != null) {
									xmlStr_tExtractXMLField_1 = row30.subcompanys;
								}
								if (xmlStr_tExtractXMLField_1 != null) {// C_01
									row31 = null;
									NameSpaceTool_tExtractXMLField_1 nsTool_tExtractXMLField_1 = new NameSpaceTool_tExtractXMLField_1();
									org.dom4j.io.SAXReader reader_tExtractXMLField_1 = new org.dom4j.io.SAXReader();

									org.dom4j.Document doc_tExtractXMLField_1 = null;
									java.util.HashMap xmlNameSpaceMap_tExtractXMLField_1 = null;
									org.dom4j.XPath x_tExtractXMLField_1 = null;
									java.util.List<org.dom4j.Node> nodeList_tExtractXMLField_1 = null;
									String loopQuery_tExtractXMLField_1 = "/subcompanys/subcompany";

									boolean isStructError_tExtractXMLField_1 = true;

									try {

										doc_tExtractXMLField_1 = reader_tExtractXMLField_1
												.read(new java.io.StringReader(xmlStr_tExtractXMLField_1));

										nsTool_tExtractXMLField_1.countNSMap(doc_tExtractXMLField_1.getRootElement());
										xmlNameSpaceMap_tExtractXMLField_1 = nsTool_tExtractXMLField_1.xmlNameSpaceMap;

										x_tExtractXMLField_1 = doc_tExtractXMLField_1
												.createXPath(nsTool_tExtractXMLField_1.addDefaultNSPrefix(
														loopQuery_tExtractXMLField_1, loopQuery_tExtractXMLField_1));

										x_tExtractXMLField_1.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

										nodeList_tExtractXMLField_1 = (java.util.List<org.dom4j.Node>) x_tExtractXMLField_1
												.selectNodes(doc_tExtractXMLField_1);

										isStructError_tExtractXMLField_1 = false;

									} catch (java.lang.Exception ex_tExtractXMLField_1) {
										System.err.println(ex_tExtractXMLField_1.getMessage());
									}

									org.dom4j.Node node_tExtractXMLField_1 = null;
									String str_tExtractXMLField_1 = "";
									boolean resultIsNode_tExtractXMLField_1 = true;
									for (int i_tExtractXMLField_1 = 0; isStructError_tExtractXMLField_1
											|| (nodeList_tExtractXMLField_1 != null
													&& i_tExtractXMLField_1 < nodeList_tExtractXMLField_1
															.size()); i_tExtractXMLField_1++) {

										if (!isStructError_tExtractXMLField_1) {
											row31 = null;
											row31 = new row31Struct();

											org.dom4j.Node temp_tExtractXMLField_1 = nodeList_tExtractXMLField_1
													.get(i_tExtractXMLField_1);

											nb_line_tExtractXMLField_1++;
											try {
												org.dom4j.XPath xTmp0_tExtractXMLField_1 = temp_tExtractXMLField_1
														.createXPath(nsTool_tExtractXMLField_1.addDefaultNSPrefix(
																"variables", loopQuery_tExtractXMLField_1));
												xTmp0_tExtractXMLField_1
														.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

												Object obj0_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
														.evaluate(temp_tExtractXMLField_1);
												if (obj0_tExtractXMLField_1 instanceof String
														|| obj0_tExtractXMLField_1 instanceof Number) {
													resultIsNode_tExtractXMLField_1 = false;
													str_tExtractXMLField_1 = String.valueOf(obj0_tExtractXMLField_1);
												} else {
													resultIsNode_tExtractXMLField_1 = true;
													node_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
															.selectSingleNode(temp_tExtractXMLField_1);
													str_tExtractXMLField_1 = node_tExtractXMLField_1 == null ? null
															: node_tExtractXMLField_1.asXML();
												}
												row31.variables = str_tExtractXMLField_1;
											} catch (java.lang.Exception ex_tExtractXMLField_1) {
												System.err.println(ex_tExtractXMLField_1.getMessage());
												row31 = null;
											}
										}

										isStructError_tExtractXMLField_1 = false;

										globalMap.put("tExtractXMLField_1_NB_LINE", nb_line_tExtractXMLField_1);

										tos_count_tExtractXMLField_1++;

										/**
										 * [tExtractXMLField_1 main ] stop
										 */

										/**
										 * [tExtractXMLField_1 process_data_begin ] start
										 */

										currentComponent = "tExtractXMLField_1";

										/**
										 * [tExtractXMLField_1 process_data_begin ] stop
										 */
// Start of branch "row31"
										if (row31 != null) {

											/**
											 * [tFlowToIterate_1 main ] start
											 */

											currentComponent = "tFlowToIterate_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "row31");
											}

											globalMap.put("row31.variables", row31.variables);

											nb_line_tFlowToIterate_1++;
											counter_tFlowToIterate_1++;
											globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
													counter_tFlowToIterate_1);

											tos_count_tFlowToIterate_1++;

											/**
											 * [tFlowToIterate_1 main ] stop
											 */

											/**
											 * [tFlowToIterate_1 process_data_begin ] start
											 */

											currentComponent = "tFlowToIterate_1";

											/**
											 * [tFlowToIterate_1 process_data_begin ] stop
											 */
											NB_ITERATE_tJava_2++;

											if (execStat) {
												runStat.updateStatOnConnection("If1", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("row33", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk9", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk6", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk4", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk5", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk7", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("row5", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk19", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnSubjobOk7", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk14", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("row3", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk10", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("row2", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("row1", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk15", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("iterate2", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk13", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk12", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("row4", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk8", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk11", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("row6", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("row32", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnSubjobOk2", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk3", 3, 0);
											}

											if (execStat) {
												runStat.updateStatOnConnection("iterate1", 1,
														"exec" + NB_ITERATE_tJava_2);
												// Thread.sleep(1000);
											}

											/**
											 * [tJava_2 begin ] start
											 */

											ok_Hash.put("tJava_2", false);
											start_Hash.put("tJava_2", System.currentTimeMillis());

											currentComponent = "tJava_2";

											int tos_count_tJava_2 = 0;

											String foo = "bar";

											/**
											 * [tJava_2 begin ] stop
											 */

											/**
											 * [tJava_2 main ] start
											 */

											currentComponent = "tJava_2";

											tos_count_tJava_2++;

											/**
											 * [tJava_2 main ] stop
											 */

											/**
											 * [tJava_2 process_data_begin ] start
											 */

											currentComponent = "tJava_2";

											/**
											 * [tJava_2 process_data_begin ] stop
											 */

											/**
											 * [tJava_2 process_data_end ] start
											 */

											currentComponent = "tJava_2";

											/**
											 * [tJava_2 process_data_end ] stop
											 */

											/**
											 * [tJava_2 end ] start
											 */

											currentComponent = "tJava_2";

											ok_Hash.put("tJava_2", true);
											end_Hash.put("tJava_2", System.currentTimeMillis());

											if (execStat) {
												runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
											}
											tFixedFlowInput_1Process(globalMap);

											/**
											 * [tJava_2 end ] stop
											 */
											if (execStat) {
												runStat.updateStatOnConnection("iterate1", 2,
														"exec" + NB_ITERATE_tJava_2);
											}

											/**
											 * [tFlowToIterate_1 process_data_end ] start
											 */

											currentComponent = "tFlowToIterate_1";

											/**
											 * [tFlowToIterate_1 process_data_end ] stop
											 */

										} // End of branch "row31"

										// end for
									}

								} // C_01

								/**
								 * [tExtractXMLField_1 process_data_end ] start
								 */

								currentComponent = "tExtractXMLField_1";

								/**
								 * [tExtractXMLField_1 process_data_end ] stop
								 */

								/**
								 * [tJavaRow_1 process_data_end ] start
								 */

								currentComponent = "tJavaRow_1";

								/**
								 * [tJavaRow_1 process_data_end ] stop
								 */

								/**
								 * [tReplicate_2 process_data_end ] start
								 */

								currentComponent = "tReplicate_2";

								/**
								 * [tReplicate_2 process_data_end ] stop
								 */

							} // End of branch "row28"

							/**
							 * [tFilterRow_1 process_data_end ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_end ] stop
							 */

							/**
							 * [tReplicate_1 process_data_end ] start
							 */

							currentComponent = "tReplicate_1";

							/**
							 * [tReplicate_1 process_data_end ] stop
							 */

						} // End of branch "row23"

						/**
						 * [tFileInputXML_1 process_data_end ] start
						 */

						currentComponent = "tFileInputXML_1";

						/**
						 * [tFileInputXML_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputXML_1 end ] start
						 */

						currentComponent = "tFileInputXML_1";

					}
				}
				globalMap.put("tFileInputXML_1_NB_LINE", nb_line_tFileInputXML_1);

				ok_Hash.put("tFileInputXML_1", true);
				end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				/**
				 * [tFileInputXML_1 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row25");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tReplicate_2 end ] start
				 */

				currentComponent = "tReplicate_2";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row28");
				}

				ok_Hash.put("tReplicate_2", true);
				end_Hash.put("tReplicate_2", System.currentTimeMillis());

				/**
				 * [tReplicate_2 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row29");
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tExtractXMLField_1 end ] start
				 */

				currentComponent = "tExtractXMLField_1";

				globalMap.put("tExtractXMLField_1_NB_LINE", nb_line_tExtractXMLField_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row30");
				}

				ok_Hash.put("tExtractXMLField_1", true);
				end_Hash.put("tExtractXMLField_1", System.currentTimeMillis());

				/**
				 * [tExtractXMLField_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE", nb_line_tFlowToIterate_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row31");
				}

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputXML_1 finally ] start
				 */

				currentComponent = "tFileInputXML_1";

				/**
				 * [tFileInputXML_1 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tReplicate_2 finally ] start
				 */

				currentComponent = "tReplicate_2";

				/**
				 * [tReplicate_2 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tExtractXMLField_1 finally ] start
				 */

				currentComponent = "tExtractXMLField_1";

				/**
				 * [tExtractXMLField_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}

	public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];

		public String value;

		public String getValue() {
			return this.value;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.value = readString(dis);

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.value, dos);

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("value=" + value);
			sb.append(",id=" + id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];

		public String variables;

		public String getVariables() {
			return this.variables;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.variables = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variables, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variables=" + variables);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row32Struct row32 = new row32Struct();
				row33Struct row33 = new row33Struct();

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row33");
				}

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tExtractXMLField_2 begin ] start
				 */

				ok_Hash.put("tExtractXMLField_2", false);
				start_Hash.put("tExtractXMLField_2", System.currentTimeMillis());

				currentComponent = "tExtractXMLField_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row32");
				}

				int tos_count_tExtractXMLField_2 = 0;

				int nb_line_tExtractXMLField_2 = 0;

				class NameSpaceTool_tExtractXMLField_2 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put("pre" + defualtNSPath.size(), ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
										path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
							countNSMap(e);
						}
					}

					/**
					 * the regex for the xpath like that : case 1 :
					 * functionA(locationXPathExpression) case 2 :
					 * fn:functionA(locationXPathExpression) case 3 :
					 * functionA(functionB(locationXPathExpression)) case 4 :
					 * fn:functionA(fn:functionB(locationXPathExpression)) and like that.
					 */
					private java.util.regex.Pattern simpleFunctionPattern;
					private StringBuffer stringBuffer;
					private java.util.Map<String, String> resultCache;

					public String addDefaultNSPrefix(final String xpathExpression, String loopPath) {
						if (defualtNSPath.size() < 1) {
							return xpathExpression;
						}

						if (resultCache == null) {
							resultCache = new java.util.HashMap<String, String>();
						}

						String resultXpathExpression = resultCache.get(xpathExpression);
						if (resultXpathExpression != null) {
							return resultXpathExpression;
						}

						String locationPathExpression = xpathExpression;

						if (simpleFunctionPattern == null) {
							simpleFunctionPattern = java.util.regex.Pattern
									.compile("([a-zA-z0-9]+:)?[a-zA-Z]+-?[A-Za-z]+\\(.*\\)");
						}

						boolean isSimpleFunctionXPath = simpleFunctionPattern.matcher(xpathExpression).matches();
						String tail = null;
						if (isSimpleFunctionXPath) {
							int start = xpathExpression.lastIndexOf('(');
							int end = xpathExpression.indexOf(')');
							if (start < end) {
								if (stringBuffer == null) {
									stringBuffer = new StringBuffer();
								}
								locationPathExpression = xpathExpression.substring(start + 1, end);
								stringBuffer.append(xpathExpression.substring(0, start + 1));
								tail = xpathExpression.substring(end);
							} else {
								isSimpleFunctionXPath = false;
							}
						}

						locationPathExpression = addDefaultNSPrefixForLocationXPathExpression(locationPathExpression,
								loopPath);

						resultXpathExpression = locationPathExpression;

						if (isSimpleFunctionXPath) {
							stringBuffer.append(locationPathExpression);
							stringBuffer.append(tail);
							resultXpathExpression = stringBuffer.toString();
							stringBuffer.setLength(0);
						}

						resultCache.put(xpathExpression, resultXpathExpression);
						return resultXpathExpression;
					}

					private String addDefaultNSPrefixForLocationXPathExpression(String path, String loopPath) {
						String fullPath = loopPath;
						if (!path.equals(fullPath)) {
							for (String tmp : path.split("/")) {
								if (("..").equals(tmp)) {
									fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
								} else {
									fullPath += "/" + tmp;
								}
							}
						}
						int[] indexs = new int[fullPath.split("/").length - 1];
						java.util.Arrays.fill(indexs, -1);
						int length = 0;
						for (int i = 0; i < defualtNSPath.size(); i++) {
							if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
								java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length,
										i);
								length = defualtNSPath.get(i).length();
							}
						}

						StringBuilder newPath = new StringBuilder();
						String[] pathStrs = path.split("/");
						for (int i = 0; i < pathStrs.length; i++) {
							String tmp = pathStrs[i];
							if (newPath.length() > 0) {
								newPath.append("/");
							}
							if (tmp.length() > 0 && tmp.indexOf(":") == -1
									&& tmp.indexOf(".") == -1 /* && tmp.indexOf("@") == -1 */) {
								int index = indexs[i + indexs.length - pathStrs.length];
								if (index >= 0) {
									// ==== add by wliu to support both filter and functions==
									if (tmp.indexOf("[") > 0 && tmp.indexOf("]") > tmp.indexOf("[")) {// include filter
										String tmpStr = replaceElementWithNS(tmp, "pre" + index + ":");
										newPath.append(tmpStr);
									} else {
										if (tmp.indexOf("@") != -1 || tmp.indexOf("(") < tmp.indexOf(")")) { // include
																												// attribute
											newPath.append(tmp);
										} else {
											// ==add end=======
											newPath.append("pre").append(index).append(":").append(tmp);
										}
									}
								} else {
									newPath.append(tmp);
								}
							} else {
								newPath.append(tmp);
							}
						}
						return newPath.toString();
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(matches);

					private String replaceElementWithNS(String global, String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches("\\b(div|mod|and|or)\\b.*") || group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tExtractXMLField_2 {
					public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
							if (attri != null && ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				XML_API_tExtractXMLField_2 xml_api_tExtractXMLField_2 = new XML_API_tExtractXMLField_2();

				/**
				 * [tExtractXMLField_2 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {

					row32.variables = (String) globalMap.get("row31.variables");

					/**
					 * [tFixedFlowInput_1 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_1 main ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					tos_count_tFixedFlowInput_1++;

					/**
					 * [tFixedFlowInput_1 main ] stop
					 */

					/**
					 * [tFixedFlowInput_1 process_data_begin ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					/**
					 * [tFixedFlowInput_1 process_data_begin ] stop
					 */

					/**
					 * [tExtractXMLField_2 main ] start
					 */

					currentComponent = "tExtractXMLField_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row32");
					}

					String xmlStr_tExtractXMLField_2 = null;
					routines.system.Document xmlDocument_tExtractXMLField_2 = null;
					if (row32.variables != null) {
						xmlStr_tExtractXMLField_2 = row32.variables;
					}
					if (xmlStr_tExtractXMLField_2 != null) {// C_01
						row33 = null;
						NameSpaceTool_tExtractXMLField_2 nsTool_tExtractXMLField_2 = new NameSpaceTool_tExtractXMLField_2();
						org.dom4j.io.SAXReader reader_tExtractXMLField_2 = new org.dom4j.io.SAXReader();

						org.dom4j.Document doc_tExtractXMLField_2 = null;
						java.util.HashMap xmlNameSpaceMap_tExtractXMLField_2 = null;
						org.dom4j.XPath x_tExtractXMLField_2 = null;
						java.util.List<org.dom4j.Node> nodeList_tExtractXMLField_2 = null;
						String loopQuery_tExtractXMLField_2 = "/variables/variable";

						boolean isStructError_tExtractXMLField_2 = true;

						try {

							doc_tExtractXMLField_2 = reader_tExtractXMLField_2
									.read(new java.io.StringReader(xmlStr_tExtractXMLField_2));

							nsTool_tExtractXMLField_2.countNSMap(doc_tExtractXMLField_2.getRootElement());
							xmlNameSpaceMap_tExtractXMLField_2 = nsTool_tExtractXMLField_2.xmlNameSpaceMap;

							x_tExtractXMLField_2 = doc_tExtractXMLField_2.createXPath(nsTool_tExtractXMLField_2
									.addDefaultNSPrefix(loopQuery_tExtractXMLField_2, loopQuery_tExtractXMLField_2));

							x_tExtractXMLField_2.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_2);

							nodeList_tExtractXMLField_2 = (java.util.List<org.dom4j.Node>) x_tExtractXMLField_2
									.selectNodes(doc_tExtractXMLField_2);

							isStructError_tExtractXMLField_2 = false;

						} catch (java.lang.Exception ex_tExtractXMLField_2) {
							System.err.println(ex_tExtractXMLField_2.getMessage());
						}

						org.dom4j.Node node_tExtractXMLField_2 = null;
						String str_tExtractXMLField_2 = "";
						boolean resultIsNode_tExtractXMLField_2 = true;
						for (int i_tExtractXMLField_2 = 0; isStructError_tExtractXMLField_2
								|| (nodeList_tExtractXMLField_2 != null
										&& i_tExtractXMLField_2 < nodeList_tExtractXMLField_2
												.size()); i_tExtractXMLField_2++) {

							if (!isStructError_tExtractXMLField_2) {
								row33 = null;
								row33 = new row33Struct();

								org.dom4j.Node temp_tExtractXMLField_2 = nodeList_tExtractXMLField_2
										.get(i_tExtractXMLField_2);

								nb_line_tExtractXMLField_2++;
								try {
									org.dom4j.XPath xTmp0_tExtractXMLField_2 = temp_tExtractXMLField_2
											.createXPath(nsTool_tExtractXMLField_2.addDefaultNSPrefix(".",
													loopQuery_tExtractXMLField_2));
									xTmp0_tExtractXMLField_2.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_2);

									Object obj0_tExtractXMLField_2 = xTmp0_tExtractXMLField_2
											.evaluate(temp_tExtractXMLField_2);
									if (obj0_tExtractXMLField_2 instanceof String
											|| obj0_tExtractXMLField_2 instanceof Number) {
										resultIsNode_tExtractXMLField_2 = false;
										str_tExtractXMLField_2 = String.valueOf(obj0_tExtractXMLField_2);
									} else {
										resultIsNode_tExtractXMLField_2 = true;
										node_tExtractXMLField_2 = xTmp0_tExtractXMLField_2
												.selectSingleNode(temp_tExtractXMLField_2);
										str_tExtractXMLField_2 = xTmp0_tExtractXMLField_2
												.valueOf(temp_tExtractXMLField_2);
									}
									if (resultIsNode_tExtractXMLField_2
											&& xml_api_tExtractXMLField_2.isDefNull(node_tExtractXMLField_2)) {
										row33.value = null;
									} else if (resultIsNode_tExtractXMLField_2
											&& xml_api_tExtractXMLField_2.isEmpty(node_tExtractXMLField_2)) {
										row33.value = "";
									} else if (resultIsNode_tExtractXMLField_2
											&& xml_api_tExtractXMLField_2.isMissing(node_tExtractXMLField_2)) {
										row33.value = null;
									} else {
										row33.value = str_tExtractXMLField_2;
									}
									org.dom4j.XPath xTmp1_tExtractXMLField_2 = temp_tExtractXMLField_2
											.createXPath(nsTool_tExtractXMLField_2.addDefaultNSPrefix("@id",
													loopQuery_tExtractXMLField_2));
									xTmp1_tExtractXMLField_2.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_2);

									Object obj1_tExtractXMLField_2 = xTmp1_tExtractXMLField_2
											.evaluate(temp_tExtractXMLField_2);
									if (obj1_tExtractXMLField_2 instanceof String
											|| obj1_tExtractXMLField_2 instanceof Number) {
										resultIsNode_tExtractXMLField_2 = false;
										str_tExtractXMLField_2 = String.valueOf(obj1_tExtractXMLField_2);
									} else {
										resultIsNode_tExtractXMLField_2 = true;
										node_tExtractXMLField_2 = xTmp1_tExtractXMLField_2
												.selectSingleNode(temp_tExtractXMLField_2);
										str_tExtractXMLField_2 = xTmp1_tExtractXMLField_2
												.valueOf(temp_tExtractXMLField_2);
									}
									if (resultIsNode_tExtractXMLField_2
											&& xml_api_tExtractXMLField_2.isDefNull(node_tExtractXMLField_2)) {
										row33.id = null;
									} else if (resultIsNode_tExtractXMLField_2
											&& xml_api_tExtractXMLField_2.isEmpty(node_tExtractXMLField_2)) {
										row33.id = "";
									} else if (resultIsNode_tExtractXMLField_2
											&& xml_api_tExtractXMLField_2.isMissing(node_tExtractXMLField_2)) {
										row33.id = null;
									} else {
										row33.id = str_tExtractXMLField_2;
									}
								} catch (java.lang.Exception ex_tExtractXMLField_2) {
									System.err.println(ex_tExtractXMLField_2.getMessage());
									row33 = null;
								}
							}

							isStructError_tExtractXMLField_2 = false;

							globalMap.put("tExtractXMLField_2_NB_LINE", nb_line_tExtractXMLField_2);

							tos_count_tExtractXMLField_2++;

							/**
							 * [tExtractXMLField_2 main ] stop
							 */

							/**
							 * [tExtractXMLField_2 process_data_begin ] start
							 */

							currentComponent = "tExtractXMLField_2";

							/**
							 * [tExtractXMLField_2 process_data_begin ] stop
							 */
// Start of branch "row33"
							if (row33 != null) {

								/**
								 * [tJavaRow_2 main ] start
								 */

								currentComponent = "tJavaRow_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row33");
								}

								globalMap.put("var_" + row33.id, row33.value);
								System.out.println("variables++++++");
								System.out.println("var_" + row33.id + ": " + row33.value);
								nb_line_tJavaRow_2++;

								tos_count_tJavaRow_2++;

								/**
								 * [tJavaRow_2 main ] stop
								 */

								/**
								 * [tJavaRow_2 process_data_begin ] start
								 */

								currentComponent = "tJavaRow_2";

								/**
								 * [tJavaRow_2 process_data_begin ] stop
								 */

								/**
								 * [tJavaRow_2 process_data_end ] start
								 */

								currentComponent = "tJavaRow_2";

								/**
								 * [tJavaRow_2 process_data_end ] stop
								 */

							} // End of branch "row33"

							// end for
						}

					} // C_01

					/**
					 * [tExtractXMLField_2 process_data_end ] start
					 */

					currentComponent = "tExtractXMLField_2";

					/**
					 * [tExtractXMLField_2 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_1 process_data_end ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					/**
					 * [tFixedFlowInput_1 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_1 end ] start
					 */

					currentComponent = "tFixedFlowInput_1";

				}
				globalMap.put("tFixedFlowInput_1_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tExtractXMLField_2 end ] start
				 */

				currentComponent = "tExtractXMLField_2";

				globalMap.put("tExtractXMLField_2_NB_LINE", nb_line_tExtractXMLField_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row32");
				}

				ok_Hash.put("tExtractXMLField_2", true);
				end_Hash.put("tExtractXMLField_2", System.currentTimeMillis());

				/**
				 * [tExtractXMLField_2 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row33");
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJava_4Process(globalMap);

				/**
				 * [tJavaRow_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tExtractXMLField_2 finally ] start
				 */

				currentComponent = "tExtractXMLField_2";

				/**
				 * [tExtractXMLField_2 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				String foo = "bar";

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 process_data_begin ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 process_data_begin ] stop
				 */

				/**
				 * [tJava_4 process_data_end ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 process_data_end ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_3Process(globalMap);

				/**
				 * [tJava_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				String foo = "bar";
				System.exit(0);

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 process_data_begin ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 process_data_begin ] stop
				 */

				/**
				 * [tJava_3 process_data_end ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 process_data_end ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tDBConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String dbProperties_tDBConnection_1 = "";
				String url_tDBConnection_1 = "jdbc:postgresql://" + (String) globalMap.get("var_host_origen_psql") + ":"
						+ (String) globalMap.get("var_port_origen_psql") + "/"
						+ (String) globalMap.get("var_database_origen_psql");

				if (dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
					url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
				}
				String dbUser_tDBConnection_1 = (String) globalMap.get("var_usuario_origen_psql");

				final String decryptedPassword_tDBConnection_1 = (String) globalMap.get("var_clave_origen_psql");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
					if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(true);
				}

				globalMap.put("schema_" + "tDBConnection_1", "");

				globalMap.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tDBConnection_2Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				String dbProperties_tDBConnection_2 = "";
				String url_tDBConnection_2 = "jdbc:postgresql://" + (String) globalMap.get("var_host_destino_psql")
						+ ":" + (String) globalMap.get("var_port_destino_psql") + "/"
						+ (String) globalMap.get("var_database_destino_psql");

				if (dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
					url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
				}
				String dbUser_tDBConnection_2 = (String) globalMap.get("var_usuario_destino_psql");

				final String decryptedPassword_tDBConnection_2 = (String) globalMap.get("var_clave_destino_psql");
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_2.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
					if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
							java.sql.DriverManager.registerDriver(d_tDBConnection_2);
						} catch (java.lang.Exception e_tDBConnection_2) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
				globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(true);
				}

				globalMap.put("schema_" + "tDBConnection_2", (String) globalMap.get("var_esquema_destino_psql"));

				globalMap.put("conn_" + "tDBConnection_2", conn_tDBConnection_2);

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tMongoDBConnection_1Process(globalMap);

				/**
				 * [tDBConnection_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tMongoDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBConnection_1 begin ] start
				 */

				ok_Hash.put("tMongoDBConnection_1", false);
				start_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());

				currentComponent = "tMongoDBConnection_1";

				int tos_count_tMongoDBConnection_1 = 0;

				java.util.logging.Logger.getLogger("org.mongodb.driver").setLevel(java.util.logging.Level.SEVERE);
				com.mongodb.MongoClientOptions clientOptions_tMongoDBConnection_1 = new com.mongodb.MongoClientOptions.Builder()

						.build();

				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBConnection_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBConnection_1 = new com.mongodb.ServerAddress(
						(String) globalMap.get("var_host_mongo"), conversion.getPortGrupollano(globalMap));
				com.mongodb.Mongo mongo_tMongoDBConnection_1 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBConnection_1, mongoCredentialList_tMongoDBConnection_1,
						clientOptions_tMongoDBConnection_1);

				mongo_tMongoDBConnection_1.getAddress();
				com.mongodb.client.MongoDatabase db_tMongoDBConnection_1 = ((com.mongodb.MongoClient) mongo_tMongoDBConnection_1)
						.getDatabase((String) globalMap.get("var_database_mongo"));

				globalMap.put("mongo_tMongoDBConnection_1", mongo_tMongoDBConnection_1);
				globalMap.put("db_tMongoDBConnection_1", db_tMongoDBConnection_1);

				/**
				 * [tMongoDBConnection_1 begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 main ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				tos_count_tMongoDBConnection_1++;

				/**
				 * [tMongoDBConnection_1 main ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBConnection_1 end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				ok_Hash.put("tMongoDBConnection_1", true);
				end_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tJava_9Process(globalMap);

				/**
				 * [tMongoDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBConnection_1 finally ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());

				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				String fecha_texto = TalendDate.getDate("yyyy_MM_dd_HH_mm_ss");

				Date fecha_date = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",
						TalendDate.getDate("yyyy-MM-dd HH:mm:ss"));

				globalMap.put("fecha_date", fecha_date);
				globalMap.put("fecha_texto", fecha_texto);

				java.util.UUID uuid = java.util.UUID.randomUUID();
				String uuidStr = uuid.toString();

				globalMap.put("GUID", uuidStr);

				globalMap.put("contador_inserts", 0);
				globalMap.put("contador_updates", 0);
				globalMap.put("contador_rejects", 0);

				/**
				 * [tJava_9 begin ] stop
				 */

				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */

				/**
				 * [tJava_9 process_data_begin ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 process_data_begin ] stop
				 */

				/**
				 * [tJava_9 process_data_end ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 process_data_end ] stop
				 */

				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);

				/**
				 * [tJava_9 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_9 finally ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];

		public String id_proceso_dimension;

		public String getId_proceso_dimension() {
			return this.id_proceso_dimension;
		}

		public java.util.Date fecha_inicio;

		public java.util.Date getFecha_inicio() {
			return this.fecha_inicio;
		}

		public String finalizado;

		public String getFinalizado() {
			return this.finalizado;
		}

		public String guid;

		public String getGuid() {
			return this.guid;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.id_proceso_dimension = readString(dis);

					this.fecha_inicio = readDate(dis);

					this.finalizado = readString(dis);

					this.guid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_proceso_dimension, dos);

				// java.util.Date

				writeDate(this.fecha_inicio, dos);

				// String

				writeString(this.finalizado, dos);

				// String

				writeString(this.guid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_proceso_dimension=" + id_proceso_dimension);
			sb.append(",fecha_inicio=" + String.valueOf(fecha_inicio));
			sb.append(",finalizado=" + finalizado);
			sb.append(",guid=" + guid);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tMongoDBOutput_2 begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_2", false);
				start_Hash.put("tMongoDBOutput_2", System.currentTimeMillis());

				currentComponent = "tMongoDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMongoDBOutput_2 = 0;

				int nb_line_tMongoDBOutput_2 = 0;

				class DBObjectUtil_tMongoDBOutput_2 {

					private org.bson.Document object = null;

					// Put value to embedded document
					// If have no embedded document, put the value to root document
					public void put(String parentNode, String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode)) {
							object.put(curentName, value);
						} else {
							String objNames[] = parentNode.split("\\.");
							org.bson.Document lastNode = getParentNode(parentNode, objNames.length - 1);
							lastNode.put(curentName, value);
							org.bson.Document parenttNode = null;
							for (int i = objNames.length - 1; i >= 0; i--) {
								parenttNode = getParentNode(parentNode, i - 1);
								parenttNode.put(objNames[i], lastNode);
								lastNode = clone(parenttNode);
							}
							object = lastNode;
						}
					}

					private org.bson.Document clone(org.bson.Document source) {
						org.bson.Document to = new org.bson.Document();
						for (java.util.Map.Entry<String, Object> cur : source.entrySet()) {
							to.append(cur.getKey(), cur.getValue());
						}
						return to;
					}

					// Get node(embedded document) by path configuration
					public org.bson.Document getParentNode(String parentNode, int index) {
						org.bson.Document document = object;
						if (parentNode == null || "".equals(parentNode)) {
							return object;
						} else {
							String objNames[] = parentNode.split("\\.");
							for (int i = 0; i <= index; i++) {
								document = (org.bson.Document) document.get(objNames[i]);
								if (document == null) {
									document = new org.bson.Document();
									return document;
								}
								if (i == index) {
									break;
								}
							}
							return document;
						}
					}

					public void putkeyNode(String parentNode, String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode) || ".".equals(parentNode)) {
							put(parentNode, curentName, value);
						} else {
							put("", parentNode + "." + curentName, value);
						}
					}

					public org.bson.Document getObject() {
						return this.object;
					}

					public void setObject(org.bson.Document object) {
						this.object = object;
					}

				}

				DBObjectUtil_tMongoDBOutput_2 updateObjectUtil_tMongoDBOutput_2 = new DBObjectUtil_tMongoDBOutput_2();
				DBObjectUtil_tMongoDBOutput_2 queryObjectUtil_tMongoDBOutput_2 = new DBObjectUtil_tMongoDBOutput_2();
				java.util.Map<String, String> pathMap_tMongoDBOutput_2 = new java.util.HashMap<String, String>();
				com.mongodb.MongoClient mongo_tMongoDBOutput_2 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBOutput_2 = null;

				pathMap_tMongoDBOutput_2.put("id_proceso_dimension", "");

				pathMap_tMongoDBOutput_2.put("fecha_inicio", "");

				pathMap_tMongoDBOutput_2.put("finalizado", "");

				pathMap_tMongoDBOutput_2.put("guid", "");

				mongo_tMongoDBOutput_2 = (com.mongodb.MongoClient) globalMap.get("mongo_tMongoDBConnection_1");
				db_tMongoDBOutput_2 = (com.mongodb.client.MongoDatabase) globalMap.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBOutput_2 = db_tMongoDBOutput_2
						.getCollection((String) globalMap.get("var_coleccion_mongo"));

				/**
				 * [tMongoDBOutput_2 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_4 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_4", false);
				start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_4";

				int tos_count_tFixedFlowInput_4 = 0;

				for (int i_tFixedFlowInput_4 = 0; i_tFixedFlowInput_4 < 1; i_tFixedFlowInput_4++) {

					row4.id_proceso_dimension = (String) globalMap.get("var_id_proceso_dimension");

					row4.fecha_inicio = (Date) globalMap.get("fecha_date");

					row4.finalizado = "No";

					row4.guid = (String) globalMap.get("GUID");

					/**
					 * [tFixedFlowInput_4 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_4 main ] start
					 */

					currentComponent = "tFixedFlowInput_4";

					tos_count_tFixedFlowInput_4++;

					/**
					 * [tFixedFlowInput_4 main ] stop
					 */

					/**
					 * [tFixedFlowInput_4 process_data_begin ] start
					 */

					currentComponent = "tFixedFlowInput_4";

					/**
					 * [tFixedFlowInput_4 process_data_begin ] stop
					 */

					/**
					 * [tMongoDBOutput_2 main ] start
					 */

					currentComponent = "tMongoDBOutput_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
					}

					try {
						updateObjectUtil_tMongoDBOutput_2.setObject(new org.bson.Document());

						if (row4.id_proceso_dimension != null) {

							updateObjectUtil_tMongoDBOutput_2.put(pathMap_tMongoDBOutput_2.get("id_proceso_dimension"),
									"id_proceso_dimension", row4.id_proceso_dimension);
						}
						if (row4.fecha_inicio != null) {

							updateObjectUtil_tMongoDBOutput_2.put(pathMap_tMongoDBOutput_2.get("fecha_inicio"),
									"fecha_inicio", row4.fecha_inicio);
						}
						updateObjectUtil_tMongoDBOutput_2.put(pathMap_tMongoDBOutput_2.get("finalizado"), "finalizado",
								row4.finalizado);
						if (row4.guid != null) {

							updateObjectUtil_tMongoDBOutput_2.put(pathMap_tMongoDBOutput_2.get("guid"), "guid",
									row4.guid);
						}
						org.bson.Document updateObj_tMongoDBOutput_2 = updateObjectUtil_tMongoDBOutput_2.getObject();

						coll_tMongoDBOutput_2.insertOne(updateObj_tMongoDBOutput_2);

					} catch (Exception e_tMongoDBOutput_2) {

						throw e_tMongoDBOutput_2;

					}
					nb_line_tMongoDBOutput_2++;

					tos_count_tMongoDBOutput_2++;

					/**
					 * [tMongoDBOutput_2 main ] stop
					 */

					/**
					 * [tMongoDBOutput_2 process_data_begin ] start
					 */

					currentComponent = "tMongoDBOutput_2";

					/**
					 * [tMongoDBOutput_2 process_data_begin ] stop
					 */

					/**
					 * [tMongoDBOutput_2 process_data_end ] start
					 */

					currentComponent = "tMongoDBOutput_2";

					/**
					 * [tMongoDBOutput_2 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_4 process_data_end ] start
					 */

					currentComponent = "tFixedFlowInput_4";

					/**
					 * [tFixedFlowInput_4 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_4 end ] start
					 */

					currentComponent = "tFixedFlowInput_4";

				}
				globalMap.put("tFixedFlowInput_4_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_4", true);
				end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_4 end ] stop
				 */

				/**
				 * [tMongoDBOutput_2 end ] start
				 */

				currentComponent = "tMongoDBOutput_2";

				globalMap.put("tMongoDBOutput_2_NB_LINE", nb_line_tMongoDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMongoDBOutput_2", true);
				end_Hash.put("tMongoDBOutput_2", System.currentTimeMillis());

				if (true) {

					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "true");
					}
					tDBInput_2Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "false");
					}
				}

				/**
				 * [tMongoDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_4 finally ] start
				 */

				currentComponent = "tFixedFlowInput_4";

				/**
				 * [tFixedFlowInput_4 finally ] stop
				 */

				/**
				 * [tMongoDBOutput_2 finally ] start
				 */

				currentComponent = "tMongoDBOutput_2";

				/**
				 * [tMongoDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String codigo_anterior;

		public String getCodigo_anterior() {
			return this.codigo_anterior;
		}

		public long codigo_prisma;

		public long getCodigo_prisma() {
			return this.codigo_prisma;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		public String cedula;

		public String getCedula() {
			return this.cedula;
		}

		public String nombre_barrio;

		public String getNombre_barrio() {
			return this.nombre_barrio;
		}

		public String direcci__n;

		public String getDirecci__n() {
			return this.direcci__n;
		}

		public String actividad_comercial;

		public String getActividad_comercial() {
			return this.actividad_comercial;
		}

		public String pais;

		public String getPais() {
			return this.pais;
		}

		public String departamento;

		public String getDepartamento() {
			return this.departamento;
		}

		public String municipio;

		public String getMunicipio() {
			return this.municipio;
		}

		public java.util.Date fecha_suscripci__n;

		public java.util.Date getFecha_suscripci__n() {
			return this.fecha_suscripci__n;
		}

		public String medidor;

		public String getMedidor() {
			return this.medidor;
		}

		public String cic_nombre;

		public String getCic_nombre() {
			return this.cic_nombre;
		}

		public String empresa_nom;

		public String getEmpresa_nom() {
			return this.empresa_nom;
		}

		public String estado_prisma;

		public String getEstado_prisma() {
			return this.estado_prisma;
		}

		public Double morosidad;

		public Double getMorosidad() {
			return this.morosidad;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.codigo_prisma;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.codigo_prisma != other.codigo_prisma)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.codigo_anterior = this.codigo_anterior;
			other.codigo_prisma = this.codigo_prisma;
			other.nombre = this.nombre;
			other.cedula = this.cedula;
			other.nombre_barrio = this.nombre_barrio;
			other.direcci__n = this.direcci__n;
			other.actividad_comercial = this.actividad_comercial;
			other.pais = this.pais;
			other.departamento = this.departamento;
			other.municipio = this.municipio;
			other.fecha_suscripci__n = this.fecha_suscripci__n;
			other.medidor = this.medidor;
			other.cic_nombre = this.cic_nombre;
			other.empresa_nom = this.empresa_nom;
			other.estado_prisma = this.estado_prisma;
			other.morosidad = this.morosidad;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.codigo_prisma = this.codigo_prisma;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.codigo_anterior = readString(dis);

					this.codigo_prisma = dis.readLong();

					this.nombre = readString(dis);

					this.cedula = readString(dis);

					this.nombre_barrio = readString(dis);

					this.direcci__n = readString(dis);

					this.actividad_comercial = readString(dis);

					this.pais = readString(dis);

					this.departamento = readString(dis);

					this.municipio = readString(dis);

					this.fecha_suscripci__n = readDate(dis);

					this.medidor = readString(dis);

					this.cic_nombre = readString(dis);

					this.empresa_nom = readString(dis);

					this.estado_prisma = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.morosidad = null;
					} else {
						this.morosidad = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codigo_anterior, dos);

				// long

				dos.writeLong(this.codigo_prisma);

				// String

				writeString(this.nombre, dos);

				// String

				writeString(this.cedula, dos);

				// String

				writeString(this.nombre_barrio, dos);

				// String

				writeString(this.direcci__n, dos);

				// String

				writeString(this.actividad_comercial, dos);

				// String

				writeString(this.pais, dos);

				// String

				writeString(this.departamento, dos);

				// String

				writeString(this.municipio, dos);

				// java.util.Date

				writeDate(this.fecha_suscripci__n, dos);

				// String

				writeString(this.medidor, dos);

				// String

				writeString(this.cic_nombre, dos);

				// String

				writeString(this.empresa_nom, dos);

				// String

				writeString(this.estado_prisma, dos);

				// Double

				if (this.morosidad == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.morosidad);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_anterior=" + codigo_anterior);
			sb.append(",codigo_prisma=" + String.valueOf(codigo_prisma));
			sb.append(",nombre=" + nombre);
			sb.append(",cedula=" + cedula);
			sb.append(",nombre_barrio=" + nombre_barrio);
			sb.append(",direcci__n=" + direcci__n);
			sb.append(",actividad_comercial=" + actividad_comercial);
			sb.append(",pais=" + pais);
			sb.append(",departamento=" + departamento);
			sb.append(",municipio=" + municipio);
			sb.append(",fecha_suscripci__n=" + String.valueOf(fecha_suscripci__n));
			sb.append(",medidor=" + medidor);
			sb.append(",cic_nombre=" + cic_nombre);
			sb.append(",empresa_nom=" + empresa_nom);
			sb.append(",estado_prisma=" + estado_prisma);
			sb.append(",morosidad=" + String.valueOf(morosidad));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_prisma, other.codigo_prisma);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String codigo_anterior;

		public String getCodigo_anterior() {
			return this.codigo_anterior;
		}

		public long codigo_prisma;

		public long getCodigo_prisma() {
			return this.codigo_prisma;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		public String cedula;

		public String getCedula() {
			return this.cedula;
		}

		public String nombre_barrio;

		public String getNombre_barrio() {
			return this.nombre_barrio;
		}

		public String direcci__n;

		public String getDirecci__n() {
			return this.direcci__n;
		}

		public String actividad_comercial;

		public String getActividad_comercial() {
			return this.actividad_comercial;
		}

		public String pais;

		public String getPais() {
			return this.pais;
		}

		public String departamento;

		public String getDepartamento() {
			return this.departamento;
		}

		public String municipio;

		public String getMunicipio() {
			return this.municipio;
		}

		public java.util.Date fecha_suscripci__n;

		public java.util.Date getFecha_suscripci__n() {
			return this.fecha_suscripci__n;
		}

		public String medidor;

		public String getMedidor() {
			return this.medidor;
		}

		public String cic_nombre;

		public String getCic_nombre() {
			return this.cic_nombre;
		}

		public String empresa_nom;

		public String getEmpresa_nom() {
			return this.empresa_nom;
		}

		public String estado_prisma;

		public String getEstado_prisma() {
			return this.estado_prisma;
		}

		public Double morosidad;

		public Double getMorosidad() {
			return this.morosidad;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.codigo_prisma;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.codigo_prisma != other.codigo_prisma)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.codigo_anterior = this.codigo_anterior;
			other.codigo_prisma = this.codigo_prisma;
			other.nombre = this.nombre;
			other.cedula = this.cedula;
			other.nombre_barrio = this.nombre_barrio;
			other.direcci__n = this.direcci__n;
			other.actividad_comercial = this.actividad_comercial;
			other.pais = this.pais;
			other.departamento = this.departamento;
			other.municipio = this.municipio;
			other.fecha_suscripci__n = this.fecha_suscripci__n;
			other.medidor = this.medidor;
			other.cic_nombre = this.cic_nombre;
			other.empresa_nom = this.empresa_nom;
			other.estado_prisma = this.estado_prisma;
			other.morosidad = this.morosidad;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.codigo_prisma = this.codigo_prisma;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.codigo_anterior = readString(dis);

					this.codigo_prisma = dis.readLong();

					this.nombre = readString(dis);

					this.cedula = readString(dis);

					this.nombre_barrio = readString(dis);

					this.direcci__n = readString(dis);

					this.actividad_comercial = readString(dis);

					this.pais = readString(dis);

					this.departamento = readString(dis);

					this.municipio = readString(dis);

					this.fecha_suscripci__n = readDate(dis);

					this.medidor = readString(dis);

					this.cic_nombre = readString(dis);

					this.empresa_nom = readString(dis);

					this.estado_prisma = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.morosidad = null;
					} else {
						this.morosidad = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codigo_anterior, dos);

				// long

				dos.writeLong(this.codigo_prisma);

				// String

				writeString(this.nombre, dos);

				// String

				writeString(this.cedula, dos);

				// String

				writeString(this.nombre_barrio, dos);

				// String

				writeString(this.direcci__n, dos);

				// String

				writeString(this.actividad_comercial, dos);

				// String

				writeString(this.pais, dos);

				// String

				writeString(this.departamento, dos);

				// String

				writeString(this.municipio, dos);

				// java.util.Date

				writeDate(this.fecha_suscripci__n, dos);

				// String

				writeString(this.medidor, dos);

				// String

				writeString(this.cic_nombre, dos);

				// String

				writeString(this.empresa_nom, dos);

				// String

				writeString(this.estado_prisma, dos);

				// Double

				if (this.morosidad == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.morosidad);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_anterior=" + codigo_anterior);
			sb.append(",codigo_prisma=" + String.valueOf(codigo_prisma));
			sb.append(",nombre=" + nombre);
			sb.append(",cedula=" + cedula);
			sb.append(",nombre_barrio=" + nombre_barrio);
			sb.append(",direcci__n=" + direcci__n);
			sb.append(",actividad_comercial=" + actividad_comercial);
			sb.append(",pais=" + pais);
			sb.append(",departamento=" + departamento);
			sb.append(",municipio=" + municipio);
			sb.append(",fecha_suscripci__n=" + String.valueOf(fecha_suscripci__n));
			sb.append(",medidor=" + medidor);
			sb.append(",cic_nombre=" + cic_nombre);
			sb.append(",empresa_nom=" + empresa_nom);
			sb.append(",estado_prisma=" + estado_prisma);
			sb.append(",morosidad=" + String.valueOf(morosidad));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_prisma, other.codigo_prisma);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row1Struct row1 = new row1Struct();

				/**
				 * [tFlowToIterate_2 begin ] start
				 */

				int NB_ITERATE_tJava_7 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_2", false);
				start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFlowToIterate_2 = 0;

				int nb_line_tFlowToIterate_2 = 0;
				int counter_tFlowToIterate_2 = 0;

				/**
				 * [tFlowToIterate_2 begin ] stop
				 */

				/**
				 * [tReplicate_3 begin ] start
				 */

				ok_Hash.put("tReplicate_3", false);
				start_Hash.put("tReplicate_3", System.currentTimeMillis());

				currentComponent = "tReplicate_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tReplicate_3 = 0;

				/**
				 * [tReplicate_3 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();
				stmt_tDBInput_2.setFetchSize(5000);

				String dbquery_tDBInput_2 = "select distinct  dsus.dsus_pcodigo Codigo_Anterior, \ndsus.dsus_ideregistr Codigo_Prisma, \nter.ter_nomcompleto Nombre,"
						+ " \nter.ter_documento Cedula, \nbar.barrio_nom Nombre_Barrio, \npro.pro_direccion Dirección,\nunid.uni_nombre1 Actividad_"
						+ "Comercial,\n'Colombia' Pais,\ndep.departamento_nom Departamento,\nproye.proyecto_nom Municipio, \ndsus.dsus_fecinicio Fe"
						+ "cha_Suscripción, \npro.pro_idepropieda Medidor, \ncic.cic_nombre,\nemp.empresa_nom,\ndsus.dsus_estado estado_prisma,\nco"
						+ "alesce((select case when (extract(days from (now()::timestamp - fac_fecha::timestamp)))> 30 then \n                     "
						+ "                  extract(days from (now()::timestamp - fac_fecha::timestamp)) \n                                   else"
						+ "  0 end \n				 from fac_factura fac  where dsus_ideregistr=dsus.dsus_ideregistr  \n				 and fac.fac_idepadre is null and"
						+ " fac.fac_estado in ('A','C') and fac_sdoreal>0 \n				 order by fac_fecvence  limit 1 \n				),0) morosidad\nfrom dsus_det"
						+ "suscrip dsus\nleft join empresas emp on emp.empresa_sevemp=dsus.emp_ideregistro\nleft join ter_tercero ter on ter.ter_id"
						+ "eregistro = dsus.ter_ideregistro\nleft join barrios bar on bar.barrio_ideregistro = dsus.uni_barrio and emp.empresa_cod="
						+ "bar.barrio_codemp\nleft join pro_propiedad pro on pro.pro_ideregistro = dsus.pro_ideregistro\nleft join proyectos proye "
						+ "on proye.proyecto_ideregistro = dsus.uni_municipio and emp.empresa_cod=proye.proyecto_codemp\nleft join departamentos de"
						+ "p  on dep.departamento_ideregistro=proye.departamento_ideregistro\nleft join uni_unidad unid on unid.uni_ideregistro=dsu"
						+ "s.uni_actsuscripc \ninner join cic_ciclo cic on cic.cic_ideregistro=dsus.cic_ideregistro\nwhere"
						+ ((String) globalMap.get("var_query_where_sentence"));

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.codigo_anterior = null;
						} else {

							row2.codigo_anterior = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.codigo_prisma = 0;
						} else {

							row2.codigo_prisma = rs_tDBInput_2.getLong(2);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.nombre = null;
						} else {

							row2.nombre = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.cedula = null;
						} else {

							row2.cedula = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.nombre_barrio = null;
						} else {

							row2.nombre_barrio = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.direcci__n = null;
						} else {

							row2.direcci__n = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.actividad_comercial = null;
						} else {

							row2.actividad_comercial = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.pais = null;
						} else {

							row2.pais = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.departamento = null;
						} else {

							row2.departamento = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.municipio = null;
						} else {

							row2.municipio = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.fecha_suscripci__n = null;
						} else {

							row2.fecha_suscripci__n = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 11);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.medidor = null;
						} else {

							row2.medidor = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.cic_nombre = null;
						} else {

							row2.cic_nombre = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, false);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.empresa_nom = null;
						} else {

							row2.empresa_nom = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, false);
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.estado_prisma = null;
						} else {

							row2.estado_prisma = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, false);
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.morosidad = null;
						} else {

							row2.morosidad = rs_tDBInput_2.getDouble(16);
							if (rs_tDBInput_2.wasNull()) {
								row2.morosidad = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tReplicate_3 main ] start
						 */

						currentComponent = "tReplicate_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						row1 = new row1Struct();

						row1.codigo_anterior = row2.codigo_anterior;
						row1.codigo_prisma = row2.codigo_prisma;
						row1.nombre = row2.nombre;
						row1.cedula = row2.cedula;
						row1.nombre_barrio = row2.nombre_barrio;
						row1.direcci__n = row2.direcci__n;
						row1.actividad_comercial = row2.actividad_comercial;
						row1.pais = row2.pais;
						row1.departamento = row2.departamento;
						row1.municipio = row2.municipio;
						row1.fecha_suscripci__n = row2.fecha_suscripci__n;
						row1.medidor = row2.medidor;
						row1.cic_nombre = row2.cic_nombre;
						row1.empresa_nom = row2.empresa_nom;
						row1.estado_prisma = row2.estado_prisma;
						row1.morosidad = row2.morosidad;

						tos_count_tReplicate_3++;

						/**
						 * [tReplicate_3 main ] stop
						 */

						/**
						 * [tReplicate_3 process_data_begin ] start
						 */

						currentComponent = "tReplicate_3";

						/**
						 * [tReplicate_3 process_data_begin ] stop
						 */

						/**
						 * [tFlowToIterate_2 main ] start
						 */

						currentComponent = "tFlowToIterate_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						globalMap.put("row1.codigo_anterior", row1.codigo_anterior);

						globalMap.put("row1.codigo_prisma", row1.codigo_prisma);

						globalMap.put("row1.nombre", row1.nombre);

						globalMap.put("row1.cedula", row1.cedula);

						globalMap.put("row1.nombre_barrio", row1.nombre_barrio);

						globalMap.put("row1.direcci__n", row1.direcci__n);

						globalMap.put("row1.actividad_comercial", row1.actividad_comercial);

						globalMap.put("row1.pais", row1.pais);

						globalMap.put("row1.departamento", row1.departamento);

						globalMap.put("row1.municipio", row1.municipio);

						globalMap.put("row1.fecha_suscripci__n", row1.fecha_suscripci__n);

						globalMap.put("row1.medidor", row1.medidor);

						globalMap.put("row1.cic_nombre", row1.cic_nombre);

						globalMap.put("row1.empresa_nom", row1.empresa_nom);

						globalMap.put("row1.estado_prisma", row1.estado_prisma);

						globalMap.put("row1.morosidad", row1.morosidad);

						nb_line_tFlowToIterate_2++;
						counter_tFlowToIterate_2++;
						globalMap.put("tFlowToIterate_2_CURRENT_ITERATION", counter_tFlowToIterate_2);

						tos_count_tFlowToIterate_2++;

						/**
						 * [tFlowToIterate_2 main ] stop
						 */

						/**
						 * [tFlowToIterate_2 process_data_begin ] start
						 */

						currentComponent = "tFlowToIterate_2";

						/**
						 * [tFlowToIterate_2 process_data_begin ] stop
						 */
						NB_ITERATE_tJava_7++;

						if (execStat) {
							runStat.updateStatOnConnection("OnComponentOk7", 3, 0);
						}

						if (execStat) {
							runStat.updateStatOnConnection("OnComponentOk11", 3, 0);
						}

						if (execStat) {
							runStat.updateStatOnConnection("row6", 3, 0);
						}

						if (execStat) {
							runStat.updateStatOnConnection("row3", 3, 0);
						}

						if (execStat) {
							runStat.updateStatOnConnection("OnComponentOk6", 3, 0);
						}

						if (execStat) {
							runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tJava_7);
							// Thread.sleep(1000);
						}

						/**
						 * [tJava_7 begin ] start
						 */

						ok_Hash.put("tJava_7", false);
						start_Hash.put("tJava_7", System.currentTimeMillis());

						currentComponent = "tJava_7";

						int tos_count_tJava_7 = 0;

						String foo = "bar";

						/**
						 * [tJava_7 begin ] stop
						 */

						/**
						 * [tJava_7 main ] start
						 */

						currentComponent = "tJava_7";

						tos_count_tJava_7++;

						/**
						 * [tJava_7 main ] stop
						 */

						/**
						 * [tJava_7 process_data_begin ] start
						 */

						currentComponent = "tJava_7";

						/**
						 * [tJava_7 process_data_begin ] stop
						 */

						/**
						 * [tJava_7 process_data_end ] start
						 */

						currentComponent = "tJava_7";

						/**
						 * [tJava_7 process_data_end ] stop
						 */

						/**
						 * [tJava_7 end ] start
						 */

						currentComponent = "tJava_7";

						ok_Hash.put("tJava_7", true);
						end_Hash.put("tJava_7", System.currentTimeMillis());

						if (execStat) {
							runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
						}
						tFixedFlowInput_2Process(globalMap);

						/**
						 * [tJava_7 end ] stop
						 */
						if (execStat) {
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tJava_7);
						}

						/**
						 * [tFlowToIterate_2 process_data_end ] start
						 */

						currentComponent = "tFlowToIterate_2";

						/**
						 * [tFlowToIterate_2 process_data_end ] stop
						 */

						/**
						 * [tReplicate_3 process_data_end ] start
						 */

						currentComponent = "tReplicate_3";

						/**
						 * [tReplicate_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tReplicate_3 end ] start
				 */

				currentComponent = "tReplicate_3";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tReplicate_3", true);
				end_Hash.put("tReplicate_3", System.currentTimeMillis());

				/**
				 * [tReplicate_3 end ] stop
				 */

				/**
				 * [tFlowToIterate_2 end ] start
				 */

				currentComponent = "tFlowToIterate_2";

				globalMap.put("tFlowToIterate_2_NB_LINE", nb_line_tFlowToIterate_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFlowToIterate_2", true);
				end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tJava_5Process(globalMap);

				/**
				 * [tFlowToIterate_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tReplicate_3 finally ] start
				 */

				currentComponent = "tReplicate_3";

				/**
				 * [tReplicate_3 finally ] stop
				 */

				/**
				 * [tFlowToIterate_2 finally ] start
				 */

				currentComponent = "tFlowToIterate_2";

				/**
				 * [tFlowToIterate_2 finally ] stop
				 */

				/**
				 * [tJava_7 finally ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String codigo_anterior;

		public String getCodigo_anterior() {
			return this.codigo_anterior;
		}

		public long codigo_prisma;

		public long getCodigo_prisma() {
			return this.codigo_prisma;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		public String cedula;

		public String getCedula() {
			return this.cedula;
		}

		public String nombre_barrio;

		public String getNombre_barrio() {
			return this.nombre_barrio;
		}

		public String direcci__n;

		public String getDirecci__n() {
			return this.direcci__n;
		}

		public String actividad_comercial;

		public String getActividad_comercial() {
			return this.actividad_comercial;
		}

		public String pais;

		public String getPais() {
			return this.pais;
		}

		public String departamento;

		public String getDepartamento() {
			return this.departamento;
		}

		public String municipio;

		public String getMunicipio() {
			return this.municipio;
		}

		public java.util.Date fecha_suscripci__n;

		public java.util.Date getFecha_suscripci__n() {
			return this.fecha_suscripci__n;
		}

		public String medidor;

		public String getMedidor() {
			return this.medidor;
		}

		public String cic_nombre;

		public String getCic_nombre() {
			return this.cic_nombre;
		}

		public String empresa_nom;

		public String getEmpresa_nom() {
			return this.empresa_nom;
		}

		public String estado_prisma;

		public String getEstado_prisma() {
			return this.estado_prisma;
		}

		public Double morosidad;

		public Double getMorosidad() {
			return this.morosidad;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.codigo_prisma;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.codigo_prisma != other.codigo_prisma)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.codigo_anterior = this.codigo_anterior;
			other.codigo_prisma = this.codigo_prisma;
			other.nombre = this.nombre;
			other.cedula = this.cedula;
			other.nombre_barrio = this.nombre_barrio;
			other.direcci__n = this.direcci__n;
			other.actividad_comercial = this.actividad_comercial;
			other.pais = this.pais;
			other.departamento = this.departamento;
			other.municipio = this.municipio;
			other.fecha_suscripci__n = this.fecha_suscripci__n;
			other.medidor = this.medidor;
			other.cic_nombre = this.cic_nombre;
			other.empresa_nom = this.empresa_nom;
			other.estado_prisma = this.estado_prisma;
			other.morosidad = this.morosidad;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.codigo_prisma = this.codigo_prisma;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.codigo_anterior = readString(dis);

					this.codigo_prisma = dis.readLong();

					this.nombre = readString(dis);

					this.cedula = readString(dis);

					this.nombre_barrio = readString(dis);

					this.direcci__n = readString(dis);

					this.actividad_comercial = readString(dis);

					this.pais = readString(dis);

					this.departamento = readString(dis);

					this.municipio = readString(dis);

					this.fecha_suscripci__n = readDate(dis);

					this.medidor = readString(dis);

					this.cic_nombre = readString(dis);

					this.empresa_nom = readString(dis);

					this.estado_prisma = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.morosidad = null;
					} else {
						this.morosidad = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codigo_anterior, dos);

				// long

				dos.writeLong(this.codigo_prisma);

				// String

				writeString(this.nombre, dos);

				// String

				writeString(this.cedula, dos);

				// String

				writeString(this.nombre_barrio, dos);

				// String

				writeString(this.direcci__n, dos);

				// String

				writeString(this.actividad_comercial, dos);

				// String

				writeString(this.pais, dos);

				// String

				writeString(this.departamento, dos);

				// String

				writeString(this.municipio, dos);

				// java.util.Date

				writeDate(this.fecha_suscripci__n, dos);

				// String

				writeString(this.medidor, dos);

				// String

				writeString(this.cic_nombre, dos);

				// String

				writeString(this.empresa_nom, dos);

				// String

				writeString(this.estado_prisma, dos);

				// Double

				if (this.morosidad == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.morosidad);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_anterior=" + codigo_anterior);
			sb.append(",codigo_prisma=" + String.valueOf(codigo_prisma));
			sb.append(",nombre=" + nombre);
			sb.append(",cedula=" + cedula);
			sb.append(",nombre_barrio=" + nombre_barrio);
			sb.append(",direcci__n=" + direcci__n);
			sb.append(",actividad_comercial=" + actividad_comercial);
			sb.append(",pais=" + pais);
			sb.append(",departamento=" + departamento);
			sb.append(",municipio=" + municipio);
			sb.append(",fecha_suscripci__n=" + String.valueOf(fecha_suscripci__n));
			sb.append(",medidor=" + medidor);
			sb.append(",cic_nombre=" + cic_nombre);
			sb.append(",empresa_nom=" + empresa_nom);
			sb.append(",estado_prisma=" + estado_prisma);
			sb.append(",morosidad=" + String.valueOf(morosidad));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_prisma, other.codigo_prisma);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("schema_" + "tDBConnection_2");

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ((String) globalMap.get("var_tabla_destino_psql"));
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\""
							+ ((String) globalMap.get("var_tabla_destino_psql"));
				}

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}
				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				int count_tDBOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_1 = "public";
					if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_1.next()) {
								defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						String schema_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_SCHEM");
						if (table_tDBOutput_1.equals(((String) globalMap.get("var_tabla_destino_psql")))
								&& (schema_tDBOutput_1.equals(dbschema_tDBOutput_1)
										|| ((dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0)
												&& defaultSchema_tDBOutput_1.equals(schema_tDBOutput_1)))) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1
								+ "\"(\"codigo_anterior\" VARCHAR(20)  ,\"codigo_prisma\" BIGSERIAL  not null ,\"nombre\" VARCHAR(101)  ,\"cedula\" VARCHAR(20)  ,\"nombre_barrio\" VARCHAR(50)  ,\"direccion\" VARCHAR(50)  ,\"actividad_comercial\" VARCHAR(300)  ,\"pais\" TEXT ,\"departamento\" VARCHAR(40)  ,\"municipio\" VARCHAR(30)  ,\"fecha_suscripci��n\" DATE ,\"medidor\" VARCHAR(20)  ,\"cic_nombre\" VARCHAR(100)  ,\"empresa_nom\" VARCHAR(100)  ,\"estado_prisma\" BPCHAR ,\"morosidad\" FLOAT8 ,primary key(\"codigo_prisma\"))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(
						"SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"codigo_prisma\" = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"codigo_anterior\",\"codigo_prisma\",\"nombre\",\"cedula\",\"nombre_barrio\",\"direccion\",\"actividad_comercial\",\"pais\",\"departamento\",\"municipio\",\"fecha_suscripci��n\",\"medidor\",\"cic_nombre\",\"empresa_nom\",\"estado_prisma\",\"morosidad\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1
						+ "\" SET \"codigo_anterior\" = ?,\"nombre\" = ?,\"cedula\" = ?,\"nombre_barrio\" = ?,\"direccion\" = ?,\"actividad_comercial\" = ?,\"pais\" = ?,\"departamento\" = ?,\"municipio\" = ?,\"fecha_suscripci��n\" = ?,\"medidor\" = ?,\"cic_nombre\" = ?,\"empresa_nom\" = ?,\"estado_prisma\" = ?,\"morosidad\" = ? WHERE \"codigo_prisma\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_2 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_2", false);
				start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_2";

				int tos_count_tFixedFlowInput_2 = 0;

				for (int i_tFixedFlowInput_2 = 0; i_tFixedFlowInput_2 < 1; i_tFixedFlowInput_2++) {

					row3.codigo_anterior = ((String) globalMap.get("row1.codigo_anterior"));

					row3.codigo_prisma = ((Long) globalMap.get("row1.codigo_prisma"));

					row3.nombre = ((String) globalMap.get("row1.nombre"));

					row3.cedula = ((String) globalMap.get("row1.cedula"));

					row3.nombre_barrio = ((String) globalMap.get("row1.nombre_barrio"));

					row3.direcci__n = ((String) globalMap.get("row1.direcci__n"));

					row3.actividad_comercial = ((String) globalMap.get("row1.actividad_comercial"));

					row3.pais = ((String) globalMap.get("row1.pais"));

					row3.departamento = ((String) globalMap.get("row1.departamento"));

					row3.municipio = ((String) globalMap.get("row1.municipio"));

					row3.fecha_suscripci__n = ((java.util.Date) globalMap.get("row1.fecha_suscripci__n"));

					row3.medidor = ((String) globalMap.get("row1.medidor"));

					row3.cic_nombre = ((String) globalMap.get("row1.cic_nombre"));

					row3.empresa_nom = ((String) globalMap.get("row1.empresa_nom"));

					row3.estado_prisma = ((String) globalMap.get("row1.estado_prisma"));

					row3.morosidad = ((Double) globalMap.get("row1.morosidad"));

					/**
					 * [tFixedFlowInput_2 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_2 main ] start
					 */

					currentComponent = "tFixedFlowInput_2";

					tos_count_tFixedFlowInput_2++;

					/**
					 * [tFixedFlowInput_2 main ] stop
					 */

					/**
					 * [tFixedFlowInput_2 process_data_begin ] start
					 */

					currentComponent = "tFixedFlowInput_2";

					/**
					 * [tFixedFlowInput_2 process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 main ] start
					 */

					currentComponent = "tDBOutput_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
					}

					whetherReject_tDBOutput_1 = false;
					pstmt_tDBOutput_1.setLong(1, row3.codigo_prisma);

					int checkCount_tDBOutput_1 = -1;
					try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
						while (rs_tDBOutput_1.next()) {
							checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
						}
					}
					if (checkCount_tDBOutput_1 > 0) {
						if (row3.codigo_anterior == null) {
							pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(1, row3.codigo_anterior);
						}

						if (row3.nombre == null) {
							pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(2, row3.nombre);
						}

						if (row3.cedula == null) {
							pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(3, row3.cedula);
						}

						if (row3.nombre_barrio == null) {
							pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(4, row3.nombre_barrio);
						}

						if (row3.direcci__n == null) {
							pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(5, row3.direcci__n);
						}

						if (row3.actividad_comercial == null) {
							pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(6, row3.actividad_comercial);
						}

						if (row3.pais == null) {
							pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(7, row3.pais);
						}

						if (row3.departamento == null) {
							pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(8, row3.departamento);
						}

						if (row3.municipio == null) {
							pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(9, row3.municipio);
						}

						if (row3.fecha_suscripci__n != null) {
							pstmtUpdate_tDBOutput_1.setTimestamp(10,
									new java.sql.Timestamp(row3.fecha_suscripci__n.getTime()));
						} else {
							pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.TIMESTAMP);
						}

						if (row3.medidor == null) {
							pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(11, row3.medidor);
						}

						if (row3.cic_nombre == null) {
							pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(12, row3.cic_nombre);
						}

						if (row3.empresa_nom == null) {
							pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(13, row3.empresa_nom);
						}

						if (row3.estado_prisma == null) {
							pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(14, row3.estado_prisma);
						}

						if (row3.morosidad == null) {
							pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.DOUBLE);
						} else {
							pstmtUpdate_tDBOutput_1.setDouble(15, row3.morosidad);
						}

						pstmtUpdate_tDBOutput_1.setLong(16 + count_tDBOutput_1, row3.codigo_prisma);

						try {

							updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1
									+ pstmtUpdate_tDBOutput_1.executeUpdate();
							nb_line_tDBOutput_1++;

						} catch (java.lang.Exception e) {

							whetherReject_tDBOutput_1 = true;
							throw (e);
						}
					} else {
						if (row3.codigo_anterior == null) {
							pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(1, row3.codigo_anterior);
						}

						pstmtInsert_tDBOutput_1.setLong(2, row3.codigo_prisma);

						if (row3.nombre == null) {
							pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(3, row3.nombre);
						}

						if (row3.cedula == null) {
							pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(4, row3.cedula);
						}

						if (row3.nombre_barrio == null) {
							pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(5, row3.nombre_barrio);
						}

						if (row3.direcci__n == null) {
							pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(6, row3.direcci__n);
						}

						if (row3.actividad_comercial == null) {
							pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(7, row3.actividad_comercial);
						}

						if (row3.pais == null) {
							pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(8, row3.pais);
						}

						if (row3.departamento == null) {
							pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(9, row3.departamento);
						}

						if (row3.municipio == null) {
							pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(10, row3.municipio);
						}

						if (row3.fecha_suscripci__n != null) {
							pstmtInsert_tDBOutput_1.setTimestamp(11,
									new java.sql.Timestamp(row3.fecha_suscripci__n.getTime()));
						} else {
							pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.TIMESTAMP);
						}

						if (row3.medidor == null) {
							pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(12, row3.medidor);
						}

						if (row3.cic_nombre == null) {
							pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(13, row3.cic_nombre);
						}

						if (row3.empresa_nom == null) {
							pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(14, row3.empresa_nom);
						}

						if (row3.estado_prisma == null) {
							pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(15, row3.estado_prisma);
						}

						if (row3.morosidad == null) {
							pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.DOUBLE);
						} else {
							pstmtInsert_tDBOutput_1.setDouble(16, row3.morosidad);
						}

						try {

							insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
									+ pstmtInsert_tDBOutput_1.executeUpdate();
							nb_line_tDBOutput_1++;

						} catch (java.lang.Exception e) {

							whetherReject_tDBOutput_1 = true;
							throw (e);
						}
					}
					if (!whetherReject_tDBOutput_1) {
					}

					tos_count_tDBOutput_1++;

					/**
					 * [tDBOutput_1 main ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_begin ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_end ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_2 process_data_end ] start
					 */

					currentComponent = "tFixedFlowInput_2";

					/**
					 * [tFixedFlowInput_2 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_2 end ] start
					 */

					currentComponent = "tFixedFlowInput_2";

				}
				globalMap.put("tFixedFlowInput_2_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_2", true);
				end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_2 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tJava_8Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_2 finally ] start
				 */

				currentComponent = "tFixedFlowInput_2";

				/**
				 * [tFixedFlowInput_2 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
					if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_1")) != null) {
						pstmtUpdateToClose_tDBOutput_1.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
					if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_1")) != null) {
						pstmtInsertToClose_tDBOutput_1.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());

				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				int contador_inserts = (Integer) globalMap.get("contador_inserts");
				int contador_updates = (Integer) globalMap.get("contador_updates");
				int contador_rejects = (Integer) globalMap.get("contador_rejects");

				contador_inserts += ((Integer) globalMap.get("tDBOutput_1_NB_LINE_INSERTED"));
				contador_updates += ((Integer) globalMap.get("tDBOutput_1_NB_LINE_UPDATED"));
				contador_rejects += ((Integer) globalMap.get("tDBOutput_1_NB_LINE_REJECTED"));

				globalMap.put("contador_inserts", contador_inserts);
				globalMap.put("contador_updates", contador_updates);
				globalMap.put("contador_rejects", contador_rejects);

				/**
				 * [tJava_8 begin ] stop
				 */

				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */

				/**
				 * [tJava_8 process_data_begin ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 process_data_begin ] stop
				 */

				/**
				 * [tJava_8 process_data_end ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 process_data_end ] stop
				 */

				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFixedFlowInput_5Process(globalMap);

				/**
				 * [tJava_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_8 finally ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id_proceso_dimension;

		public String getId_proceso_dimension() {
			return this.id_proceso_dimension;
		}

		public Integer registros_insertados;

		public Integer getRegistros_insertados() {
			return this.registros_insertados;
		}

		public Integer registros_actualizados;

		public Integer getRegistros_actualizados() {
			return this.registros_actualizados;
		}

		public Integer registros__rechazados;

		public Integer getRegistros__rechazados() {
			return this.registros__rechazados;
		}

		public String guid;

		public String getGuid() {
			return this.guid;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.id_proceso_dimension == null) ? 0 : this.id_proceso_dimension.hashCode());

				result = prime * result + ((this.guid == null) ? 0 : this.guid.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.id_proceso_dimension == null) {
				if (other.id_proceso_dimension != null)
					return false;

			} else if (!this.id_proceso_dimension.equals(other.id_proceso_dimension))

				return false;

			if (this.guid == null) {
				if (other.guid != null)
					return false;

			} else if (!this.guid.equals(other.guid))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id_proceso_dimension = this.id_proceso_dimension;
			other.registros_insertados = this.registros_insertados;
			other.registros_actualizados = this.registros_actualizados;
			other.registros__rechazados = this.registros__rechazados;
			other.guid = this.guid;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.id_proceso_dimension = this.id_proceso_dimension;
			other.guid = this.guid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.id_proceso_dimension = readString(dis);

					this.registros_insertados = readInteger(dis);

					this.registros_actualizados = readInteger(dis);

					this.registros__rechazados = readInteger(dis);

					this.guid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_proceso_dimension, dos);

				// Integer

				writeInteger(this.registros_insertados, dos);

				// Integer

				writeInteger(this.registros_actualizados, dos);

				// Integer

				writeInteger(this.registros__rechazados, dos);

				// String

				writeString(this.guid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_proceso_dimension=" + id_proceso_dimension);
			sb.append(",registros_insertados=" + String.valueOf(registros_insertados));
			sb.append(",registros_actualizados=" + String.valueOf(registros_actualizados));
			sb.append(",registros__rechazados=" + String.valueOf(registros__rechazados));
			sb.append(",guid=" + guid);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_proceso_dimension, other.id_proceso_dimension);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.guid, other.guid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tMongoDBOutput_3 begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_3", false);
				start_Hash.put("tMongoDBOutput_3", System.currentTimeMillis());

				currentComponent = "tMongoDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMongoDBOutput_3 = 0;

				int nb_line_tMongoDBOutput_3 = 0;

				class DBObjectUtil_tMongoDBOutput_3 {

					private org.bson.Document object = null;

					// Put value to embedded document
					// If have no embedded document, put the value to root document
					public void put(String parentNode, String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode)) {
							object.put(curentName, value);
						} else {
							String objNames[] = parentNode.split("\\.");
							org.bson.Document lastNode = getParentNode(parentNode, objNames.length - 1);
							lastNode.put(curentName, value);
							org.bson.Document parenttNode = null;
							for (int i = objNames.length - 1; i >= 0; i--) {
								parenttNode = getParentNode(parentNode, i - 1);
								parenttNode.put(objNames[i], lastNode);
								lastNode = clone(parenttNode);
							}
							object = lastNode;
						}
					}

					private org.bson.Document clone(org.bson.Document source) {
						org.bson.Document to = new org.bson.Document();
						for (java.util.Map.Entry<String, Object> cur : source.entrySet()) {
							to.append(cur.getKey(), cur.getValue());
						}
						return to;
					}

					// Get node(embedded document) by path configuration
					public org.bson.Document getParentNode(String parentNode, int index) {
						org.bson.Document document = object;
						if (parentNode == null || "".equals(parentNode)) {
							return object;
						} else {
							String objNames[] = parentNode.split("\\.");
							for (int i = 0; i <= index; i++) {
								document = (org.bson.Document) document.get(objNames[i]);
								if (document == null) {
									document = new org.bson.Document();
									return document;
								}
								if (i == index) {
									break;
								}
							}
							return document;
						}
					}

					public void putkeyNode(String parentNode, String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode) || ".".equals(parentNode)) {
							put(parentNode, curentName, value);
						} else {
							put("", parentNode + "." + curentName, value);
						}
					}

					public org.bson.Document getObject() {
						return this.object;
					}

					public void setObject(org.bson.Document object) {
						this.object = object;
					}

				}

				DBObjectUtil_tMongoDBOutput_3 updateObjectUtil_tMongoDBOutput_3 = new DBObjectUtil_tMongoDBOutput_3();
				DBObjectUtil_tMongoDBOutput_3 queryObjectUtil_tMongoDBOutput_3 = new DBObjectUtil_tMongoDBOutput_3();
				java.util.Map<String, String> pathMap_tMongoDBOutput_3 = new java.util.HashMap<String, String>();
				com.mongodb.MongoClient mongo_tMongoDBOutput_3 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBOutput_3 = null;

				pathMap_tMongoDBOutput_3.put("id_proceso_dimension", "");

				pathMap_tMongoDBOutput_3.put("registros_insertados", "");

				pathMap_tMongoDBOutput_3.put("registros_actualizados", "");

				pathMap_tMongoDBOutput_3.put("registros__rechazados", "");

				pathMap_tMongoDBOutput_3.put("guid", "");

				mongo_tMongoDBOutput_3 = (com.mongodb.MongoClient) globalMap.get("mongo_tMongoDBConnection_1");
				db_tMongoDBOutput_3 = (com.mongodb.client.MongoDatabase) globalMap.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBOutput_3 = db_tMongoDBOutput_3
						.getCollection((String) globalMap.get("var_coleccion_mongo"));

				/**
				 * [tMongoDBOutput_3 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_5 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_5", false);
				start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_5";

				int tos_count_tFixedFlowInput_5 = 0;

				for (int i_tFixedFlowInput_5 = 0; i_tFixedFlowInput_5 < 1; i_tFixedFlowInput_5++) {

					row6.id_proceso_dimension = (String) globalMap.get("var_id_proceso_dimension");

					row6.registros_insertados = (Integer) globalMap.get("contador_inserts");

					row6.registros_actualizados = (Integer) globalMap.get("contador_updates");

					row6.registros__rechazados = (Integer) globalMap.get("contador_rejects");

					row6.guid = (String) globalMap.get("GUID");

					/**
					 * [tFixedFlowInput_5 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_5 main ] start
					 */

					currentComponent = "tFixedFlowInput_5";

					tos_count_tFixedFlowInput_5++;

					/**
					 * [tFixedFlowInput_5 main ] stop
					 */

					/**
					 * [tFixedFlowInput_5 process_data_begin ] start
					 */

					currentComponent = "tFixedFlowInput_5";

					/**
					 * [tFixedFlowInput_5 process_data_begin ] stop
					 */

					/**
					 * [tMongoDBOutput_3 main ] start
					 */

					currentComponent = "tMongoDBOutput_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
					}

					try {
						updateObjectUtil_tMongoDBOutput_3.setObject(new org.bson.Document());

						queryObjectUtil_tMongoDBOutput_3.setObject(new org.bson.Document());
						int countKey_tMongoDBOutput_3 = 0;

						if (row6.id_proceso_dimension != null) {

							queryObjectUtil_tMongoDBOutput_3.putkeyNode(
									pathMap_tMongoDBOutput_3.get("id_proceso_dimension"), "id_proceso_dimension",
									row6.id_proceso_dimension);
							countKey_tMongoDBOutput_3++;

							updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("id_proceso_dimension"),
									"id_proceso_dimension", row6.id_proceso_dimension);
						}
						updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("registros_insertados"),
								"registros_insertados", row6.registros_insertados);
						updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("registros_actualizados"),
								"registros_actualizados", row6.registros_actualizados);
						if (row6.registros__rechazados != null) {

							updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("registros__rechazados"),
									"registros__rechazados", row6.registros__rechazados);
						}
						if (row6.guid != null) {

							queryObjectUtil_tMongoDBOutput_3.putkeyNode(pathMap_tMongoDBOutput_3.get("guid"), "guid",
									row6.guid);
							countKey_tMongoDBOutput_3++;

							updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("guid"), "guid",
									row6.guid);
						}
						org.bson.Document updateObj_tMongoDBOutput_3 = updateObjectUtil_tMongoDBOutput_3.getObject();

						if (countKey_tMongoDBOutput_3 <= 0) {

							throw new Exception("Must have at least one key in schema");

						} else {
							org.bson.Document queryObj_tMongoDBOutput_3 = queryObjectUtil_tMongoDBOutput_3.getObject();

							coll_tMongoDBOutput_3.updateOne(queryObj_tMongoDBOutput_3,
									new org.bson.Document("$set", updateObj_tMongoDBOutput_3),
									new com.mongodb.client.model.UpdateOptions().upsert(true));
						}

					} catch (Exception e_tMongoDBOutput_3) {

						throw e_tMongoDBOutput_3;

					}
					nb_line_tMongoDBOutput_3++;

					tos_count_tMongoDBOutput_3++;

					/**
					 * [tMongoDBOutput_3 main ] stop
					 */

					/**
					 * [tMongoDBOutput_3 process_data_begin ] start
					 */

					currentComponent = "tMongoDBOutput_3";

					/**
					 * [tMongoDBOutput_3 process_data_begin ] stop
					 */

					/**
					 * [tMongoDBOutput_3 process_data_end ] start
					 */

					currentComponent = "tMongoDBOutput_3";

					/**
					 * [tMongoDBOutput_3 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_5 process_data_end ] start
					 */

					currentComponent = "tFixedFlowInput_5";

					/**
					 * [tFixedFlowInput_5 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_5 end ] start
					 */

					currentComponent = "tFixedFlowInput_5";

				}
				globalMap.put("tFixedFlowInput_5_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_5", true);
				end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_5 end ] stop
				 */

				/**
				 * [tMongoDBOutput_3 end ] start
				 */

				currentComponent = "tMongoDBOutput_3";

				globalMap.put("tMongoDBOutput_3_NB_LINE", nb_line_tMongoDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMongoDBOutput_3", true);
				end_Hash.put("tMongoDBOutput_3", System.currentTimeMillis());

				/**
				 * [tMongoDBOutput_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_5 finally ] start
				 */

				currentComponent = "tFixedFlowInput_5";

				/**
				 * [tFixedFlowInput_5 finally ] stop
				 */

				/**
				 * [tMongoDBOutput_3 finally ] start
				 */

				currentComponent = "tMongoDBOutput_3";

				/**
				 * [tMongoDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				Date fecha_date = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",
						TalendDate.getDate("yyyy-MM-dd HH:mm:ss"));

				globalMap.put("fecha_date", fecha_date);

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */

				/**
				 * [tJava_5 process_data_begin ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 process_data_begin ] stop
				 */

				/**
				 * [tJava_5 process_data_end ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 process_data_end ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tFixedFlowInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		static byte[] commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id_proceso_dimension;

		public String getId_proceso_dimension() {
			return this.id_proceso_dimension;
		}

		public java.util.Date fecha_finalizacion;

		public java.util.Date getFecha_finalizacion() {
			return this.fecha_finalizacion;
		}

		public Integer registros_input;

		public Integer getRegistros_input() {
			return this.registros_input;
		}

		public Integer registros_insertados;

		public Integer getRegistros_insertados() {
			return this.registros_insertados;
		}

		public Integer registros_actualizados;

		public Integer getRegistros_actualizados() {
			return this.registros_actualizados;
		}

		public String finalizado;

		public String getFinalizado() {
			return this.finalizado;
		}

		public Integer registros__rechazados;

		public Integer getRegistros__rechazados() {
			return this.registros__rechazados;
		}

		public String guid;

		public String getGuid() {
			return this.guid;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.id_proceso_dimension == null) ? 0 : this.id_proceso_dimension.hashCode());

				result = prime * result + ((this.guid == null) ? 0 : this.guid.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.id_proceso_dimension == null) {
				if (other.id_proceso_dimension != null)
					return false;

			} else if (!this.id_proceso_dimension.equals(other.id_proceso_dimension))

				return false;

			if (this.guid == null) {
				if (other.guid != null)
					return false;

			} else if (!this.guid.equals(other.guid))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.id_proceso_dimension = this.id_proceso_dimension;
			other.fecha_finalizacion = this.fecha_finalizacion;
			other.registros_input = this.registros_input;
			other.registros_insertados = this.registros_insertados;
			other.registros_actualizados = this.registros_actualizados;
			other.finalizado = this.finalizado;
			other.registros__rechazados = this.registros__rechazados;
			other.guid = this.guid;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.id_proceso_dimension = this.id_proceso_dimension;
			other.guid = this.guid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_REQ_01_dimension_datos_basicos.length) {
					if (length < 1024 && commonByteArray_TEST_REQ_01_dimension_datos_basicos.length == 0) {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[1024];
					} else {
						commonByteArray_TEST_REQ_01_dimension_datos_basicos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length);
				strReturn = new String(commonByteArray_TEST_REQ_01_dimension_datos_basicos, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_REQ_01_dimension_datos_basicos) {

				try {

					int length = 0;

					this.id_proceso_dimension = readString(dis);

					this.fecha_finalizacion = readDate(dis);

					this.registros_input = readInteger(dis);

					this.registros_insertados = readInteger(dis);

					this.registros_actualizados = readInteger(dis);

					this.finalizado = readString(dis);

					this.registros__rechazados = readInteger(dis);

					this.guid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_proceso_dimension, dos);

				// java.util.Date

				writeDate(this.fecha_finalizacion, dos);

				// Integer

				writeInteger(this.registros_input, dos);

				// Integer

				writeInteger(this.registros_insertados, dos);

				// Integer

				writeInteger(this.registros_actualizados, dos);

				// String

				writeString(this.finalizado, dos);

				// Integer

				writeInteger(this.registros__rechazados, dos);

				// String

				writeString(this.guid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_proceso_dimension=" + id_proceso_dimension);
			sb.append(",fecha_finalizacion=" + String.valueOf(fecha_finalizacion));
			sb.append(",registros_input=" + String.valueOf(registros_input));
			sb.append(",registros_insertados=" + String.valueOf(registros_insertados));
			sb.append(",registros_actualizados=" + String.valueOf(registros_actualizados));
			sb.append(",finalizado=" + finalizado);
			sb.append(",registros__rechazados=" + String.valueOf(registros__rechazados));
			sb.append(",guid=" + guid);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_proceso_dimension, other.id_proceso_dimension);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.guid, other.guid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tMongoDBOutput_1 begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_1", false);
				start_Hash.put("tMongoDBOutput_1", System.currentTimeMillis());

				currentComponent = "tMongoDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMongoDBOutput_1 = 0;

				int nb_line_tMongoDBOutput_1 = 0;

				class DBObjectUtil_tMongoDBOutput_1 {

					private org.bson.Document object = null;

					// Put value to embedded document
					// If have no embedded document, put the value to root document
					public void put(String parentNode, String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode)) {
							object.put(curentName, value);
						} else {
							String objNames[] = parentNode.split("\\.");
							org.bson.Document lastNode = getParentNode(parentNode, objNames.length - 1);
							lastNode.put(curentName, value);
							org.bson.Document parenttNode = null;
							for (int i = objNames.length - 1; i >= 0; i--) {
								parenttNode = getParentNode(parentNode, i - 1);
								parenttNode.put(objNames[i], lastNode);
								lastNode = clone(parenttNode);
							}
							object = lastNode;
						}
					}

					private org.bson.Document clone(org.bson.Document source) {
						org.bson.Document to = new org.bson.Document();
						for (java.util.Map.Entry<String, Object> cur : source.entrySet()) {
							to.append(cur.getKey(), cur.getValue());
						}
						return to;
					}

					// Get node(embedded document) by path configuration
					public org.bson.Document getParentNode(String parentNode, int index) {
						org.bson.Document document = object;
						if (parentNode == null || "".equals(parentNode)) {
							return object;
						} else {
							String objNames[] = parentNode.split("\\.");
							for (int i = 0; i <= index; i++) {
								document = (org.bson.Document) document.get(objNames[i]);
								if (document == null) {
									document = new org.bson.Document();
									return document;
								}
								if (i == index) {
									break;
								}
							}
							return document;
						}
					}

					public void putkeyNode(String parentNode, String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode) || ".".equals(parentNode)) {
							put(parentNode, curentName, value);
						} else {
							put("", parentNode + "." + curentName, value);
						}
					}

					public org.bson.Document getObject() {
						return this.object;
					}

					public void setObject(org.bson.Document object) {
						this.object = object;
					}

				}

				DBObjectUtil_tMongoDBOutput_1 updateObjectUtil_tMongoDBOutput_1 = new DBObjectUtil_tMongoDBOutput_1();
				DBObjectUtil_tMongoDBOutput_1 queryObjectUtil_tMongoDBOutput_1 = new DBObjectUtil_tMongoDBOutput_1();
				java.util.Map<String, String> pathMap_tMongoDBOutput_1 = new java.util.HashMap<String, String>();
				com.mongodb.MongoClient mongo_tMongoDBOutput_1 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBOutput_1 = null;

				pathMap_tMongoDBOutput_1.put("id_proceso_dimension", "");

				pathMap_tMongoDBOutput_1.put("fecha_finalizacion", "");

				pathMap_tMongoDBOutput_1.put("registros_input", "");

				pathMap_tMongoDBOutput_1.put("registros_insertados", "");

				pathMap_tMongoDBOutput_1.put("registros_actualizados", "");

				pathMap_tMongoDBOutput_1.put("finalizado", "");

				pathMap_tMongoDBOutput_1.put("registros__rechazados", "");

				pathMap_tMongoDBOutput_1.put("guid", "");

				mongo_tMongoDBOutput_1 = (com.mongodb.MongoClient) globalMap.get("mongo_tMongoDBConnection_1");
				db_tMongoDBOutput_1 = (com.mongodb.client.MongoDatabase) globalMap.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBOutput_1 = db_tMongoDBOutput_1
						.getCollection((String) globalMap.get("var_coleccion_mongo"));

				/**
				 * [tMongoDBOutput_1 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_3 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_3", false);
				start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_3";

				int tos_count_tFixedFlowInput_3 = 0;

				for (int i_tFixedFlowInput_3 = 0; i_tFixedFlowInput_3 < 1; i_tFixedFlowInput_3++) {

					row5.id_proceso_dimension = (String) globalMap.get("var_id_proceso_dimension");

					row5.fecha_finalizacion = (Date) globalMap.get("fecha_date");

					row5.registros_input = (Integer) globalMap.get("tDBInput_2_NB_LINE");

					row5.registros_insertados = (Integer) globalMap.get("contador_inserts");

					row5.registros_actualizados = (Integer) globalMap.get("contador_updates");

					row5.finalizado = "Si";

					row5.registros__rechazados = (Integer) globalMap.get("contador_rejects");

					row5.guid = (String) globalMap.get("GUID");

					/**
					 * [tFixedFlowInput_3 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_3 main ] start
					 */

					currentComponent = "tFixedFlowInput_3";

					tos_count_tFixedFlowInput_3++;

					/**
					 * [tFixedFlowInput_3 main ] stop
					 */

					/**
					 * [tFixedFlowInput_3 process_data_begin ] start
					 */

					currentComponent = "tFixedFlowInput_3";

					/**
					 * [tFixedFlowInput_3 process_data_begin ] stop
					 */

					/**
					 * [tMongoDBOutput_1 main ] start
					 */

					currentComponent = "tMongoDBOutput_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
					}

					try {
						updateObjectUtil_tMongoDBOutput_1.setObject(new org.bson.Document());

						queryObjectUtil_tMongoDBOutput_1.setObject(new org.bson.Document());
						int countKey_tMongoDBOutput_1 = 0;

						if (row5.id_proceso_dimension != null) {

							queryObjectUtil_tMongoDBOutput_1.putkeyNode(
									pathMap_tMongoDBOutput_1.get("id_proceso_dimension"), "id_proceso_dimension",
									row5.id_proceso_dimension);
							countKey_tMongoDBOutput_1++;

							updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("id_proceso_dimension"),
									"id_proceso_dimension", row5.id_proceso_dimension);
						}
						if (row5.fecha_finalizacion != null) {

							updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("fecha_finalizacion"),
									"fecha_finalizacion", row5.fecha_finalizacion);
						}
						if (row5.registros_input != null) {

							updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("registros_input"),
									"registros_input", row5.registros_input);
						}
						updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("registros_insertados"),
								"registros_insertados", row5.registros_insertados);
						updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("registros_actualizados"),
								"registros_actualizados", row5.registros_actualizados);
						updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("finalizado"), "finalizado",
								row5.finalizado);
						if (row5.registros__rechazados != null) {

							updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("registros__rechazados"),
									"registros__rechazados", row5.registros__rechazados);
						}
						if (row5.guid != null) {

							queryObjectUtil_tMongoDBOutput_1.putkeyNode(pathMap_tMongoDBOutput_1.get("guid"), "guid",
									row5.guid);
							countKey_tMongoDBOutput_1++;

							updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("guid"), "guid",
									row5.guid);
						}
						org.bson.Document updateObj_tMongoDBOutput_1 = updateObjectUtil_tMongoDBOutput_1.getObject();

						if (countKey_tMongoDBOutput_1 <= 0) {

							throw new Exception("Must have at least one key in schema");

						} else {
							org.bson.Document queryObj_tMongoDBOutput_1 = queryObjectUtil_tMongoDBOutput_1.getObject();

							coll_tMongoDBOutput_1.updateOne(queryObj_tMongoDBOutput_1,
									new org.bson.Document("$set", updateObj_tMongoDBOutput_1),
									new com.mongodb.client.model.UpdateOptions().upsert(true));
						}

					} catch (Exception e_tMongoDBOutput_1) {

						throw e_tMongoDBOutput_1;

					}
					nb_line_tMongoDBOutput_1++;

					tos_count_tMongoDBOutput_1++;

					/**
					 * [tMongoDBOutput_1 main ] stop
					 */

					/**
					 * [tMongoDBOutput_1 process_data_begin ] start
					 */

					currentComponent = "tMongoDBOutput_1";

					/**
					 * [tMongoDBOutput_1 process_data_begin ] stop
					 */

					/**
					 * [tMongoDBOutput_1 process_data_end ] start
					 */

					currentComponent = "tMongoDBOutput_1";

					/**
					 * [tMongoDBOutput_1 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_3 process_data_end ] start
					 */

					currentComponent = "tFixedFlowInput_3";

					/**
					 * [tFixedFlowInput_3 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_3 end ] start
					 */

					currentComponent = "tFixedFlowInput_3";

				}
				globalMap.put("tFixedFlowInput_3_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_3", true);
				end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_3 end ] stop
				 */

				/**
				 * [tMongoDBOutput_1 end ] start
				 */

				currentComponent = "tMongoDBOutput_1";

				globalMap.put("tMongoDBOutput_1_NB_LINE", nb_line_tMongoDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMongoDBOutput_1", true);
				end_Hash.put("tMongoDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tMongoDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_3 finally ] start
				 */

				currentComponent = "tFixedFlowInput_3";

				/**
				 * [tFixedFlowInput_3 finally ] stop
				 */

				/**
				 * [tMongoDBOutput_1 finally ] start
				 */

				currentComponent = "tMongoDBOutput_1";

				/**
				 * [tMongoDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {
					conn_tDBClose_1.close();
				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tMongoDBClose_1Process(globalMap);

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tMongoDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBClose_1 begin ] start
				 */

				ok_Hash.put("tMongoDBClose_1", false);
				start_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				currentComponent = "tMongoDBClose_1";

				int tos_count_tMongoDBClose_1 = 0;

				/**
				 * [tMongoDBClose_1 begin ] stop
				 */

				/**
				 * [tMongoDBClose_1 main ] start
				 */

				currentComponent = "tMongoDBClose_1";

				com.mongodb.Mongo mongo_tMongoDBClose_1 = (com.mongodb.Mongo) globalMap
						.get("mongo_tMongoDBConnection_1");
				if (mongo_tMongoDBClose_1 != null) {

					mongo_tMongoDBClose_1.close();

				}

				tos_count_tMongoDBClose_1++;

				/**
				 * [tMongoDBClose_1 main ] stop
				 */

				/**
				 * [tMongoDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBClose_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBClose_1 end ] start
				 */

				currentComponent = "tMongoDBClose_1";

				ok_Hash.put("tMongoDBClose_1", true);
				end_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tDBClose_2Process(globalMap);

				/**
				 * [tMongoDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBClose_1 finally ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_2 begin ] start
				 */

				ok_Hash.put("tDBClose_2", false);
				start_Hash.put("tDBClose_2", System.currentTimeMillis());

				currentComponent = "tDBClose_2";

				int tos_count_tDBClose_2 = 0;

				/**
				 * [tDBClose_2 begin ] stop
				 */

				/**
				 * [tDBClose_2 main ] start
				 */

				currentComponent = "tDBClose_2";

				java.sql.Connection conn_tDBClose_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");
				if (conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed()) {
					conn_tDBClose_2.close();
				}

				tos_count_tDBClose_2++;

				/**
				 * [tDBClose_2 main ] stop
				 */

				/**
				 * [tDBClose_2 process_data_begin ] start
				 */

				currentComponent = "tDBClose_2";

				/**
				 * [tDBClose_2 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_2 process_data_end ] start
				 */

				currentComponent = "tDBClose_2";

				/**
				 * [tDBClose_2 process_data_end ] stop
				 */

				/**
				 * [tDBClose_2 end ] start
				 */

				currentComponent = "tDBClose_2";

				ok_Hash.put("tDBClose_2", true);
				end_Hash.put("tDBClose_2", System.currentTimeMillis());

				/**
				 * [tDBClose_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_2 finally ] start
				 */

				currentComponent = "tDBClose_2";

				/**
				 * [tDBClose_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final REQ_01_dimension_datos_basicos REQ_01_dimension_datos_basicosClass = new REQ_01_dimension_datos_basicos();

		int exitCode = REQ_01_dimension_datos_basicosClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = REQ_01_dimension_datos_basicos.class.getClassLoader().getResourceAsStream(
					"test/req_01_dimension_datos_basicos_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = REQ_01_dimension_datos_basicos.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : REQ_01_dimension_datos_basicos");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 295786 characters generated by Talend Open Studio for Big Data on the April
 * 4, 2023 at 9:16:43 AM COT
 ************************************************************************************************/